{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyONH3b+nnm47JK/Ibm4/OSb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"bofUXUjCPQmx","executionInfo":{"status":"ok","timestamp":1728553643357,"user_tz":-60,"elapsed":2921,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"outputs":[],"source":["# Import all the necessary libraries to build and evaluation the inflation model\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import scipy.stats as stats\n","from statsmodels.stats.outliers_influence import variance_inflation_factor"]},{"cell_type":"code","source":["# Mount file\n","from google.colab import files\n","file_upload = files.upload()"],"metadata":{"id":"ahE-sYJ1D8eS","colab":{"base_uri":"https://localhost:8080/","height":73},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1728553699484,"user_tz":-60,"elapsed":56147,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"40e72b3d-1b95-4652-ea87-d9e059718be1"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9564ceef-e645-4f12-8e6f-186b16f86db5\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9564ceef-e645-4f12-8e6f-186b16f86db5\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Inflation_Rates - Inflation_Rate.csv to Inflation_Rates - Inflation_Rate.csv\n"]}]},{"cell_type":"code","source":["#Read the dataset\n","df = pd.read_csv(\"Inflation_Rates - Inflation_Rate.csv\")"],"metadata":{"id":"Nsz_Zpbh_SCi","executionInfo":{"status":"ok","timestamp":1728553699484,"user_tz":-60,"elapsed":12,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#First five values\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":293},"collapsed":true,"id":"dGWd4XbiAEwA","executionInfo":{"status":"ok","timestamp":1728553700102,"user_tz":-60,"elapsed":627,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"29f89ca1-e952-402e-d5d9-4d5c2bc70608"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Year  Month  All Items (Year on Change)  All Items (12 Months Avg. Change)  \\\n","0  2003      1                        10.6                               12.3   \n","1  2003      2                         7.3                               11.4   \n","2  2003      3                         5.9                               10.5   \n","3  2003      4                         8.3                               10.1   \n","4  2003      5                         8.7                               10.0   \n","\n","   Food (Year on Change)/1  Food (12 Months Avg. Change)/1  \\\n","0                      7.5                            11.6   \n","1                      3.5                             9.7   \n","2                      0.1                             7.9   \n","3                      3.3                             6.9   \n","4                      3.3                             6.3   \n","\n","   All Items Less Farm Produce (Year on Change)/2  \\\n","0                                            16.1   \n","1                                            14.2   \n","2                                            15.4   \n","3                                            16.9   \n","4                                            17.6   \n","\n","   All Items Less Farm Produce (12 Months Avg. Change)/2  \\\n","0                                               13.4       \n","1                                               14.3       \n","2                                               15.0       \n","3                                               15.6       \n","4                                               16.3       \n","\n","   All Items Less Farm Produce and Energy (Year on Change)/3  \\\n","0                                               13.6           \n","1                                               12.1           \n","2                                               13.9           \n","3                                               17.6           \n","4                                               15.5           \n","\n","   All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  \n","0                                                8.6                 \n","1                                                8.9                 \n","2                                                9.4                 \n","3                                               10.4                 \n","4                                               11.3                 "],"text/html":["\n","  <div id=\"df-b6ce0a99-154d-4f8d-a9ba-18034bdf8bcc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>All Items (Year on Change)</th>\n","      <th>All Items (12 Months Avg. Change)</th>\n","      <th>Food (Year on Change)/1</th>\n","      <th>Food (12 Months Avg. Change)/1</th>\n","      <th>All Items Less Farm Produce (Year on Change)/2</th>\n","      <th>All Items Less Farm Produce (12 Months Avg. Change)/2</th>\n","      <th>All Items Less Farm Produce and Energy (Year on Change)/3</th>\n","      <th>All Items Less Farm Produce and Energy (12 Months Avg. Change)/3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2003</td>\n","      <td>1</td>\n","      <td>10.6</td>\n","      <td>12.3</td>\n","      <td>7.5</td>\n","      <td>11.6</td>\n","      <td>16.1</td>\n","      <td>13.4</td>\n","      <td>13.6</td>\n","      <td>8.6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2003</td>\n","      <td>2</td>\n","      <td>7.3</td>\n","      <td>11.4</td>\n","      <td>3.5</td>\n","      <td>9.7</td>\n","      <td>14.2</td>\n","      <td>14.3</td>\n","      <td>12.1</td>\n","      <td>8.9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2003</td>\n","      <td>3</td>\n","      <td>5.9</td>\n","      <td>10.5</td>\n","      <td>0.1</td>\n","      <td>7.9</td>\n","      <td>15.4</td>\n","      <td>15.0</td>\n","      <td>13.9</td>\n","      <td>9.4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2003</td>\n","      <td>4</td>\n","      <td>8.3</td>\n","      <td>10.1</td>\n","      <td>3.3</td>\n","      <td>6.9</td>\n","      <td>16.9</td>\n","      <td>15.6</td>\n","      <td>17.6</td>\n","      <td>10.4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2003</td>\n","      <td>5</td>\n","      <td>8.7</td>\n","      <td>10.0</td>\n","      <td>3.3</td>\n","      <td>6.3</td>\n","      <td>17.6</td>\n","      <td>16.3</td>\n","      <td>15.5</td>\n","      <td>11.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6ce0a99-154d-4f8d-a9ba-18034bdf8bcc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b6ce0a99-154d-4f8d-a9ba-18034bdf8bcc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b6ce0a99-154d-4f8d-a9ba-18034bdf8bcc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e4cac84b-7ca3-4d15-bba0-278c2970cc10\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4cac84b-7ca3-4d15-bba0-278c2970cc10')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e4cac84b-7ca3-4d15-bba0-278c2970cc10 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 259,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 2003,\n        \"max\": 2024,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2003,\n          2016,\n          2011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (Year on Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.90613966134569,\n        \"min\": 3.0,\n        \"max\": 34.19,\n        \"num_unique_values\": 187,\n        \"samples\": [\n          34.19,\n          10.3,\n          14.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (12 Months Avg. Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.603366389574933,\n        \"min\": 5.4,\n        \"max\": 30.76,\n        \"num_unique_values\": 166,\n        \"samples\": [\n          16.76,\n          16.95,\n          9.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (Year on Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.740079615055489,\n        \"min\": -3.7,\n        \"max\": 40.87,\n        \"num_unique_values\": 188,\n        \"samples\": [\n          40.01,\n          20.6,\n          12.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (12 Months Avg. Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.18811672792881,\n        \"min\": 1.5,\n        \"max\": 36.36,\n        \"num_unique_values\": 191,\n        \"samples\": [\n          17.93,\n          13.9,\n          20.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (Year on Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.773306774223912,\n        \"min\": -0.4,\n        \"max\": 41.2,\n        \"num_unique_values\": 196,\n        \"samples\": [\n          9.03,\n          18.07,\n          23.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (12 Months Avg. Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.384768305395555,\n        \"min\": 4.3,\n        \"max\": 33.2,\n        \"num_unique_values\": 187,\n        \"samples\": [\n          23.87,\n          13.3,\n          5.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (Year on Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.666628452282912,\n        \"min\": -6.5,\n        \"max\": 27.8,\n        \"num_unique_values\": 210,\n        \"samples\": [\n          13.1,\n          13.76,\n          11.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (12 Months Avg. Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.397988459194135,\n        \"min\": 0.6,\n        \"max\": 24.65,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          6.8,\n          22.9,\n          8.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#General information about the dataset\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"URJl6ZJyAPo3","executionInfo":{"status":"ok","timestamp":1728553700102,"user_tz":-60,"elapsed":50,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"f35aa884-0d2a-49c3-ccfd-9689f4522d29"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 259 entries, 0 to 258\n","Data columns (total 10 columns):\n"," #   Column                                                            Non-Null Count  Dtype  \n","---  ------                                                            --------------  -----  \n"," 0   Year                                                              259 non-null    int64  \n"," 1   Month                                                             259 non-null    int64  \n"," 2   All Items (Year on Change)                                        259 non-null    float64\n"," 3   All Items (12 Months Avg. Change)                                 259 non-null    float64\n"," 4   Food (Year on Change)/1                                           259 non-null    float64\n"," 5   Food (12 Months Avg. Change)/1                                    259 non-null    float64\n"," 6   All Items Less Farm Produce (Year on Change)/2                    259 non-null    float64\n"," 7   All Items Less Farm Produce (12 Months Avg. Change)/2             259 non-null    float64\n"," 8   All Items Less Farm Produce and Energy (Year on Change)/3         259 non-null    float64\n"," 9   All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  259 non-null    float64\n","dtypes: float64(8), int64(2)\n","memory usage: 20.4 KB\n"]}]},{"cell_type":"code","source":["# Statistical information on the data\n","df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":459},"collapsed":true,"id":"9ok6WWPzAXZW","executionInfo":{"status":"ok","timestamp":1728553700103,"user_tz":-60,"elapsed":46,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"61a8a8db-0132-4a12-e8f2-29ff548119a9"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Year       Month  All Items (Year on Change)  \\\n","count   259.000000  259.000000                  259.000000   \n","mean   2013.297297    6.432432                   13.708147   \n","std       6.245652    3.451529                    5.906140   \n","min    2003.000000    1.000000                    3.000000   \n","25%    2008.000000    3.000000                    9.525000   \n","50%    2013.000000    6.000000                   12.400000   \n","75%    2019.000000    9.000000                   16.275000   \n","max    2024.000000   12.000000                   34.190000   \n","\n","       All Items (12 Months Avg. Change)  Food (Year on Change)/1  \\\n","count                         259.000000               259.000000   \n","mean                           13.249768                14.758571   \n","std                             4.603366                 7.740080   \n","min                             5.400000                -3.700000   \n","25%                            10.290000                10.000000   \n","50%                            12.600000                13.790000   \n","75%                            16.420000                18.205000   \n","max                            30.760000                40.870000   \n","\n","       Food (12 Months Avg. Change)/1  \\\n","count                      259.000000   \n","mean                        14.109653   \n","std                          6.188117   \n","min                          1.500000   \n","25%                         10.010000   \n","50%                         14.000000   \n","75%                         17.900000   \n","max                         36.360000   \n","\n","       All Items Less Farm Produce (Year on Change)/2  \\\n","count                                      259.000000   \n","mean                                        12.683707   \n","std                                          6.773307   \n","min                                         -0.400000   \n","25%                                          8.820000   \n","50%                                         11.500000   \n","75%                                         14.725000   \n","max                                         41.200000   \n","\n","       All Items Less Farm Produce (12 Months Avg. Change)/2  \\\n","count                                         259.000000       \n","mean                                           12.424788       \n","std                                             5.384768       \n","min                                             4.300000       \n","25%                                             9.105000       \n","50%                                            11.500000       \n","75%                                            13.865000       \n","max                                            33.200000       \n","\n","       All Items Less Farm Produce and Energy (Year on Change)/3  \\\n","count                                         259.000000           \n","mean                                           12.052896           \n","std                                             5.666628           \n","min                                            -6.500000           \n","25%                                             9.090000           \n","50%                                            11.700000           \n","75%                                            14.180000           \n","max                                            27.800000           \n","\n","       All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  \n","count                                         259.000000                 \n","mean                                           11.666564                 \n","std                                             4.397988                 \n","min                                             0.600000                 \n","25%                                             9.300000                 \n","50%                                            11.500000                 \n","75%                                            13.220000                 \n","max                                            24.650000                 "],"text/html":["\n","  <div id=\"df-81cd01be-ee19-406c-80c4-a38bbf283f23\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>All Items (Year on Change)</th>\n","      <th>All Items (12 Months Avg. Change)</th>\n","      <th>Food (Year on Change)/1</th>\n","      <th>Food (12 Months Avg. Change)/1</th>\n","      <th>All Items Less Farm Produce (Year on Change)/2</th>\n","      <th>All Items Less Farm Produce (12 Months Avg. Change)/2</th>\n","      <th>All Items Less Farm Produce and Energy (Year on Change)/3</th>\n","      <th>All Items Less Farm Produce and Energy (12 Months Avg. Change)/3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2013.297297</td>\n","      <td>6.432432</td>\n","      <td>13.708147</td>\n","      <td>13.249768</td>\n","      <td>14.758571</td>\n","      <td>14.109653</td>\n","      <td>12.683707</td>\n","      <td>12.424788</td>\n","      <td>12.052896</td>\n","      <td>11.666564</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.245652</td>\n","      <td>3.451529</td>\n","      <td>5.906140</td>\n","      <td>4.603366</td>\n","      <td>7.740080</td>\n","      <td>6.188117</td>\n","      <td>6.773307</td>\n","      <td>5.384768</td>\n","      <td>5.666628</td>\n","      <td>4.397988</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2003.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>5.400000</td>\n","      <td>-3.700000</td>\n","      <td>1.500000</td>\n","      <td>-0.400000</td>\n","      <td>4.300000</td>\n","      <td>-6.500000</td>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2008.000000</td>\n","      <td>3.000000</td>\n","      <td>9.525000</td>\n","      <td>10.290000</td>\n","      <td>10.000000</td>\n","      <td>10.010000</td>\n","      <td>8.820000</td>\n","      <td>9.105000</td>\n","      <td>9.090000</td>\n","      <td>9.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2013.000000</td>\n","      <td>6.000000</td>\n","      <td>12.400000</td>\n","      <td>12.600000</td>\n","      <td>13.790000</td>\n","      <td>14.000000</td>\n","      <td>11.500000</td>\n","      <td>11.500000</td>\n","      <td>11.700000</td>\n","      <td>11.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2019.000000</td>\n","      <td>9.000000</td>\n","      <td>16.275000</td>\n","      <td>16.420000</td>\n","      <td>18.205000</td>\n","      <td>17.900000</td>\n","      <td>14.725000</td>\n","      <td>13.865000</td>\n","      <td>14.180000</td>\n","      <td>13.220000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2024.000000</td>\n","      <td>12.000000</td>\n","      <td>34.190000</td>\n","      <td>30.760000</td>\n","      <td>40.870000</td>\n","      <td>36.360000</td>\n","      <td>41.200000</td>\n","      <td>33.200000</td>\n","      <td>27.800000</td>\n","      <td>24.650000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81cd01be-ee19-406c-80c4-a38bbf283f23')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-81cd01be-ee19-406c-80c4-a38bbf283f23 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-81cd01be-ee19-406c-80c4-a38bbf283f23');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e137f907-e4d8-4d5f-a1cb-232a6276454b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e137f907-e4d8-4d5f-a1cb-232a6276454b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e137f907-e4d8-4d5f-a1cb-232a6276454b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 873.2624524366246,\n        \"min\": 6.245652164638957,\n        \"max\": 2024.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.2972972972973,\n          2013.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.5735854299287,\n        \"min\": 1.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.4324324324324325,\n          6.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (Year on Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.28134621135413,\n        \"min\": 3.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.708146718146718,\n          12.4,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (12 Months Avg. Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.23604803306071,\n        \"min\": 4.603366389574933,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.24976833976834,\n          12.6,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (Year on Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.34543380006009,\n        \"min\": -3.7,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.758571428571425,\n          13.79,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (12 Months Avg. Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.13132692290661,\n        \"min\": 1.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.109652509652507,\n          14.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (Year on Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.6038017276306,\n        \"min\": -0.4,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.683706563706563,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (12 Months Avg. Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.49415735319536,\n        \"min\": 4.3,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.424787644787642,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (Year on Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.34494938288168,\n        \"min\": -6.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.052895752895752,\n          11.7,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (12 Months Avg. Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.04665387875889,\n        \"min\": 0.6,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.666563706563705,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# The variables of the data\n","df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3WwV8e50Bt0_","executionInfo":{"status":"ok","timestamp":1728553700103,"user_tz":-60,"elapsed":42,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"6b6fbe62-841a-4823-bea5-135445349d35"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Year', 'Month', 'All Items (Year on Change)',\n","       'All Items (12 Months Avg. Change)', 'Food (Year on Change)/1',\n","       'Food (12 Months Avg. Change)/1',\n","       'All Items Less Farm Produce (Year on Change)/2',\n","       'All Items Less Farm Produce (12 Months Avg. Change)/2',\n","       'All Items Less Farm Produce and Energy (Year on Change)/3',\n","       'All Items Less Farm Produce and Energy (12 Months Avg. Change)/3'],\n","      dtype='object')"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Define the feature matrix X and target variable y\n","X = df[['All Items (12 Months Avg. Change)', 'Food (Year on Change)/1', 'Food (12 Months Avg. Change)/1',\n","          'All Items Less Farm Produce (Year on Change)/2', 'All Items Less Farm Produce (12 Months Avg. Change)/2',\n","         'All Items Less Farm Produce and Energy (Year on Change)/3',\n","          'All Items Less Farm Produce and Energy (12 Months Avg. Change)/3']]\n","y = df[ 'All Items (Year on Change)']\n","\n","# Split the data into training and test sets (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Standardize features if necessary\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"wZiypR69AgR5","executionInfo":{"status":"ok","timestamp":1728553700104,"user_tz":-60,"elapsed":35,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Instantiate the Linear Regression model\n","linear_model = LinearRegression()\n","\n","# Train the model\n","linear_model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred = linear_model.predict(X_test_scaled)\n","\n","# Check coefficients and intercept\n","print(f'Intercept: {linear_model.intercept_}')\n","print(f'Coefficients: {linear_model.coef_}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aMxTj5qxFhMW","executionInfo":{"status":"ok","timestamp":1728553700108,"user_tz":-60,"elapsed":38,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"27b59ff9-9390-40e1-e297-c11edb352c17"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Intercept: 13.617874396135267\n","Coefficients: [ 3.61059947  4.81176447 -3.24060168  2.73035157 -1.96349991 -0.10265922\n","  0.36180683]\n"]}]},{"cell_type":"code","source":["# Calculate MSE and R-squared\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","mae = mean_absolute_error(y_test, y_pred)\n","mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100\n","\n","print(f'Mean Squared Error: {mse}')\n","print(f'Root Mean Squared Error: {rmse}')\n","print(f'Mean Absolute Error: {mae}')\n","print(f'Mean Absolute Percentage Error: {mape}')\n","print(f'R-squared: {r2}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1wYEoCTPGAri","executionInfo":{"status":"ok","timestamp":1728553700109,"user_tz":-60,"elapsed":36,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"802d8963-6a4e-41d3-eadd-0503ab6f7c3b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error: 0.4805342900412405\n","Root Mean Squared Error: 0.6932058064105064\n","Mean Absolute Error: 0.37294879153045757\n","Mean Absolute Percentage Error: 3.088830178906182\n","R-squared: 0.9849897042358607\n"]}]},{"cell_type":"code","source":["\n","# Plot the residual\n","residuals = y_test - y_pred\n","\n","plt.figure(figsize=(10,6))\n","sns.scatterplot(x=y_pred, y=residuals)\n","plt.axhline(0, color='red', linestyle='--')\n","plt.xlabel('Predicted Values')\n","plt.ylabel('Residuals')\n","plt.title('Residuals vs. Predicted Values')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"mXOJC9bhGohF","executionInfo":{"status":"ok","timestamp":1728553700965,"user_tz":-60,"elapsed":888,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"b1225d09-7aa1-4744-8cc9-535aea2abdf4"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Q-Q plot\n","plt.figure(figsize=(8,6))\n","stats.probplot(residuals, dist=\"norm\", plot=plt)\n","plt.title('Q-Q Plot')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"f26uWxYlG-qc","executionInfo":{"status":"ok","timestamp":1728553700966,"user_tz":-60,"elapsed":75,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"06c31d62-b595-4a10-ebc0-2198688feee3"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate VIF for each variable\n","vif_data = pd.DataFrame()\n","vif_data[\"feature\"] = X.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\n","\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gmIXBp_wHU2V","executionInfo":{"status":"ok","timestamp":1728553700967,"user_tz":-60,"elapsed":72,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"3db12c3d-a2b1-4784-912e-977f29484f5c","collapsed":true},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["                                             feature          VIF\n","0                  All Items (12 Months Avg. Change)  1763.096852\n","1                            Food (Year on Change)/1    21.061671\n","2                     Food (12 Months Avg. Change)/1   868.356867\n","3     All Items Less Farm Produce (Year on Change)/2    31.578633\n","4  All Items Less Farm Produce (12 Months Avg. Ch...   415.906130\n","5  All Items Less Farm Produce and Energy (Year o...    43.266383\n","6  All Items Less Farm Produce and Energy (12 Mon...   123.857932\n"]}]},{"cell_type":"code","source":["# Print actual and predicted values\n","for actual, predicted in zip(y_test, y_pred):\n","    print(f\"Actual: {actual}, Predicted: {predicted}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8SQTYvyaHn_7","executionInfo":{"status":"ok","timestamp":1728553700967,"user_tz":-60,"elapsed":66,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"5ff5ad7b-df39-46ea-b034-08daf4a28786","collapsed":true},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual: 14.0, Predicted: 14.532069821865074\n","Actual: 6.1, Predicted: 6.5381996926073676\n","Actual: 23.6, Predicted: 24.28558854819871\n","Actual: 14.6, Predicted: 14.743535444242317\n","Actual: 8.2, Predicted: 8.652863336359061\n","Actual: 10.3, Predicted: 10.241964069196431\n","Actual: 12.26, Predicted: 12.47191815559038\n","Actual: 15.7, Predicted: 15.312074227828408\n","Actual: 8.4, Predicted: 7.724050516496791\n","Actual: 13.71, Predicted: 13.768307377407151\n","Actual: 14.4, Predicted: 14.44298487313029\n","Actual: 18.6, Predicted: 18.47009036321974\n","Actual: 28.2, Predicted: 28.14453652783213\n","Actual: 13.0, Predicted: 12.84776827331921\n","Actual: 7.8, Predicted: 8.28333727412704\n","Actual: 12.6, Predicted: 12.886318915452724\n","Actual: 12.9, Predicted: 16.794585019282188\n","Actual: 26.1, Predicted: 25.908400076553058\n","Actual: 10.2, Predicted: 9.901948453813453\n","Actual: 4.2, Predicted: 4.259041695841329\n","Actual: 9.8, Predicted: 9.576346786416723\n","Actual: 15.9, Predicted: 16.451763591656906\n","Actual: 12.2, Predicted: 12.309885689435728\n","Actual: 15.13, Predicted: 15.339390526118219\n","Actual: 18.72, Predicted: 18.251410348743228\n","Actual: 17.5, Predicted: 17.06391311423796\n","Actual: 8.0, Predicted: 7.944531181426515\n","Actual: 15.63, Predicted: 15.312220836967475\n","Actual: 21.09, Predicted: 21.1636756284553\n","Actual: 8.0, Predicted: 7.670132594189469\n","Actual: 13.0, Predicted: 12.926546934454258\n","Actual: 9.4, Predicted: 9.670709980237348\n","Actual: 12.4, Predicted: 12.754755930175815\n","Actual: 11.24, Predicted: 11.228263313940094\n","Actual: 21.3, Predicted: 21.52658325583178\n","Actual: 11.9, Predicted: 10.636552377547154\n","Actual: 8.6, Predicted: 8.880578424444742\n","Actual: 12.0, Predicted: 11.516778689283056\n","Actual: 13.6, Predicted: 13.843186872842836\n","Actual: 10.9, Predicted: 10.771592350652096\n","Actual: 13.3, Predicted: 13.395678298827953\n","Actual: 10.7, Predicted: 8.876056931328417\n","Actual: 9.0, Predicted: 9.104735483626586\n","Actual: 21.91, Predicted: 21.864447842520214\n","Actual: 11.28, Predicted: 11.228450594196515\n","Actual: 15.98, Predicted: 16.64682274652176\n","Actual: 34.19, Predicted: 34.15740218364976\n","Actual: 11.23, Predicted: 10.974578218269443\n","Actual: 11.61, Predicted: 11.34237723467341\n","Actual: 13.0, Predicted: 12.946513388965277\n","Actual: 18.33, Predicted: 17.81177516259244\n","Actual: 19.8, Predicted: 19.672456830382092\n"]}]},{"cell_type":"code","source":["y_pred\n"],"metadata":{"id":"Kxf06KdwIB14","executionInfo":{"status":"ok","timestamp":1728553819702,"user_tz":-60,"elapsed":758,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"outputId":"6d58abbc-e34f-4706-aabe-ca282d69fed0"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([14.53206982,  6.53819969, 24.28558855, 14.74353544,  8.65286334,\n","       10.24196407, 12.47191816, 15.31207423,  7.72405052, 13.76830738,\n","       14.44298487, 18.47009036, 28.14453653, 12.84776827,  8.28333727,\n","       12.88631892, 16.79458502, 25.90840008,  9.90194845,  4.2590417 ,\n","        9.57634679, 16.45176359, 12.30988569, 15.33939053, 18.25141035,\n","       17.06391311,  7.94453118, 15.31222084, 21.16367563,  7.67013259,\n","       12.92654693,  9.67070998, 12.75475593, 11.22826331, 21.52658326,\n","       10.63655238,  8.88057842, 11.51677869, 13.84318687, 10.77159235,\n","       13.3956783 ,  8.87605693,  9.10473548, 21.86444784, 11.22845059,\n","       16.64682275, 34.15740218, 10.97457822, 11.34237723, 12.94651339,\n","       17.81177516, 19.67245683])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"collapsed":true,"id":"Y6tzTbQpqm7I","executionInfo":{"status":"ok","timestamp":1728553842146,"user_tz":-60,"elapsed":615,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"98ac8082-03b8-4543-e9ff-4ad2de0a9af5"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["66     14.00\n","45      6.10\n","9      23.60\n","73     14.60\n","137     8.20\n","104    10.30\n","206    12.26\n","229    15.70\n","125     8.40\n","212    13.71\n","84     14.40\n","33     18.60\n","250    28.20\n","68     13.00\n","46      7.80\n","108    12.60\n","6      12.90\n","30     26.10\n","101    10.20\n","55      4.20\n","24      9.80\n","178    15.90\n","205    12.20\n","180    15.13\n","168    18.72\n","15     17.50\n","132     8.00\n","227    15.63\n","237    21.09\n","143     8.00\n","19     13.00\n","152     9.40\n","67     12.40\n","200    11.24\n","10     21.30\n","109    11.90\n","60      8.60\n","119    12.00\n","92     13.60\n","25     10.90\n","75     13.30\n","18     10.70\n","148     9.00\n","241    21.91\n","190    11.28\n","176    15.98\n","257    34.19\n","185    11.23\n","184    11.61\n","90     13.00\n","165    18.33\n","16     19.80\n","Name: All Items (Year on Change), dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>All Items (Year on Change)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>66</th>\n","      <td>14.00</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>6.10</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>23.60</td>\n","    </tr>\n","    <tr>\n","      <th>73</th>\n","      <td>14.60</td>\n","    </tr>\n","    <tr>\n","      <th>137</th>\n","      <td>8.20</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>10.30</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>12.26</td>\n","    </tr>\n","    <tr>\n","      <th>229</th>\n","      <td>15.70</td>\n","    </tr>\n","    <tr>\n","      <th>125</th>\n","      <td>8.40</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>13.71</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>14.40</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>18.60</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>28.20</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>13.00</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>7.80</td>\n","    </tr>\n","    <tr>\n","      <th>108</th>\n","      <td>12.60</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>12.90</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>26.10</td>\n","    </tr>\n","    <tr>\n","      <th>101</th>\n","      <td>10.20</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>4.20</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>9.80</td>\n","    </tr>\n","    <tr>\n","      <th>178</th>\n","      <td>15.90</td>\n","    </tr>\n","    <tr>\n","      <th>205</th>\n","      <td>12.20</td>\n","    </tr>\n","    <tr>\n","      <th>180</th>\n","      <td>15.13</td>\n","    </tr>\n","    <tr>\n","      <th>168</th>\n","      <td>18.72</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>17.50</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>8.00</td>\n","    </tr>\n","    <tr>\n","      <th>227</th>\n","      <td>15.63</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>21.09</td>\n","    </tr>\n","    <tr>\n","      <th>143</th>\n","      <td>8.00</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>13.00</td>\n","    </tr>\n","    <tr>\n","      <th>152</th>\n","      <td>9.40</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>12.40</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>11.24</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>21.30</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>11.90</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>8.60</td>\n","    </tr>\n","    <tr>\n","      <th>119</th>\n","      <td>12.00</td>\n","    </tr>\n","    <tr>\n","      <th>92</th>\n","      <td>13.60</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>10.90</td>\n","    </tr>\n","    <tr>\n","      <th>75</th>\n","      <td>13.30</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>10.70</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>9.00</td>\n","    </tr>\n","    <tr>\n","      <th>241</th>\n","      <td>21.91</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>11.28</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>15.98</td>\n","    </tr>\n","    <tr>\n","      <th>257</th>\n","      <td>34.19</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>11.23</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>11.61</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>13.00</td>\n","    </tr>\n","    <tr>\n","      <th>165</th>\n","      <td>18.33</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>19.80</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["len(y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYCjnN-81nDs","executionInfo":{"status":"ok","timestamp":1728554585594,"user_tz":-60,"elapsed":603,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"14fea358-657d-4007-a3a4-9933833709ae"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["52"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["len(y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LobUgOKp4cVc","executionInfo":{"status":"ok","timestamp":1728554607991,"user_tz":-60,"elapsed":767,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"a6d3226f-48db-4286-95c7-8752ed5700fc"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["52"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df_linear_regression = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})"],"metadata":{"id":"M82qqJoX4h_H","executionInfo":{"status":"ok","timestamp":1728555781597,"user_tz":-60,"elapsed":571,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["df_linear_regression.to_excel('linear_regression_results.xlsx', index=False)"],"metadata":{"id":"FLPzKudd9Aca","executionInfo":{"status":"ok","timestamp":1728555791426,"user_tz":-60,"elapsed":1345,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"z7obaPwP9Chp"},"execution_count":null,"outputs":[]}]}