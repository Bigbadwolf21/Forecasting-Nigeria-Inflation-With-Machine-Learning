{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO8oleeXuLi29Na4wYQt1c9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kCLKuWF77dtI","executionInfo":{"status":"ok","timestamp":1728559174723,"user_tz":-60,"elapsed":2413,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"outputs":[],"source":["# Import all the necessary libraries to build and evaluate the inflation model\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.svm import SVR\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import scipy.stats as stats\n","from statsmodels.stats.outliers_influence import variance_inflation_factor"]},{"cell_type":"code","source":["# Mount file\n","from google.colab import files\n","file_upload = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"2-p8J3AL9ayc","executionInfo":{"status":"ok","timestamp":1728559198615,"user_tz":-60,"elapsed":23902,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"009f5322-e777-4174-ef04-486de9d3d2cf"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-e5bda910-62e8-4e28-845a-6681c3ac1e2f\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-e5bda910-62e8-4e28-845a-6681c3ac1e2f\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Inflation_Rates - Inflation_Rate.csv to Inflation_Rates - Inflation_Rate.csv\n"]}]},{"cell_type":"code","source":["#Read the dataset\n","data = pd.read_csv(\"Inflation_Rates - Inflation_Rate.csv\")"],"metadata":{"id":"YBa0_RSL9rYJ","executionInfo":{"status":"ok","timestamp":1728559198616,"user_tz":-60,"elapsed":31,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# General information on the dataset\n","data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"BZDSHFZ1-BYw","executionInfo":{"status":"ok","timestamp":1728559198617,"user_tz":-60,"elapsed":31,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"085c8244-4e1e-476f-aa4d-0151fe993b6d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 259 entries, 0 to 258\n","Data columns (total 10 columns):\n"," #   Column                                                            Non-Null Count  Dtype  \n","---  ------                                                            --------------  -----  \n"," 0   Year                                                              259 non-null    int64  \n"," 1   Month                                                             259 non-null    int64  \n"," 2   All Items (Year on Change)                                        259 non-null    float64\n"," 3   All Items (12 Months Avg. Change)                                 259 non-null    float64\n"," 4   Food (Year on Change)/1                                           259 non-null    float64\n"," 5   Food (12 Months Avg. Change)/1                                    259 non-null    float64\n"," 6   All Items Less Farm Produce (Year on Change)/2                    259 non-null    float64\n"," 7   All Items Less Farm Produce (12 Months Avg. Change)/2             259 non-null    float64\n"," 8   All Items Less Farm Produce and Energy (Year on Change)/3         259 non-null    float64\n"," 9   All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  259 non-null    float64\n","dtypes: float64(8), int64(2)\n","memory usage: 20.4 KB\n"]}]},{"cell_type":"code","source":["# Statistical Info\n","data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":370},"collapsed":true,"id":"ZP1YeN9K-dXa","executionInfo":{"status":"ok","timestamp":1728559198617,"user_tz":-60,"elapsed":27,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"2550b68d-5b7d-4c56-910b-37e677138858"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Year       Month  All Items (Year on Change)  \\\n","count   259.000000  259.000000                  259.000000   \n","mean   2013.297297    6.432432                   13.708147   \n","std       6.245652    3.451529                    5.906140   \n","min    2003.000000    1.000000                    3.000000   \n","25%    2008.000000    3.000000                    9.525000   \n","50%    2013.000000    6.000000                   12.400000   \n","75%    2019.000000    9.000000                   16.275000   \n","max    2024.000000   12.000000                   34.190000   \n","\n","       All Items (12 Months Avg. Change)  Food (Year on Change)/1  \\\n","count                         259.000000               259.000000   \n","mean                           13.249768                14.758571   \n","std                             4.603366                 7.740080   \n","min                             5.400000                -3.700000   \n","25%                            10.290000                10.000000   \n","50%                            12.600000                13.790000   \n","75%                            16.420000                18.205000   \n","max                            30.760000                40.870000   \n","\n","       Food (12 Months Avg. Change)/1  \\\n","count                      259.000000   \n","mean                        14.109653   \n","std                          6.188117   \n","min                          1.500000   \n","25%                         10.010000   \n","50%                         14.000000   \n","75%                         17.900000   \n","max                         36.360000   \n","\n","       All Items Less Farm Produce (Year on Change)/2  \\\n","count                                      259.000000   \n","mean                                        12.683707   \n","std                                          6.773307   \n","min                                         -0.400000   \n","25%                                          8.820000   \n","50%                                         11.500000   \n","75%                                         14.725000   \n","max                                         41.200000   \n","\n","       All Items Less Farm Produce (12 Months Avg. Change)/2  \\\n","count                                         259.000000       \n","mean                                           12.424788       \n","std                                             5.384768       \n","min                                             4.300000       \n","25%                                             9.105000       \n","50%                                            11.500000       \n","75%                                            13.865000       \n","max                                            33.200000       \n","\n","       All Items Less Farm Produce and Energy (Year on Change)/3  \\\n","count                                         259.000000           \n","mean                                           12.052896           \n","std                                             5.666628           \n","min                                            -6.500000           \n","25%                                             9.090000           \n","50%                                            11.700000           \n","75%                                            14.180000           \n","max                                            27.800000           \n","\n","       All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  \n","count                                         259.000000                 \n","mean                                           11.666564                 \n","std                                             4.397988                 \n","min                                             0.600000                 \n","25%                                             9.300000                 \n","50%                                            11.500000                 \n","75%                                            13.220000                 \n","max                                            24.650000                 "],"text/html":["\n","  <div id=\"df-5ac87c14-5d7a-4e45-9104-739e70bd510d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>All Items (Year on Change)</th>\n","      <th>All Items (12 Months Avg. Change)</th>\n","      <th>Food (Year on Change)/1</th>\n","      <th>Food (12 Months Avg. Change)/1</th>\n","      <th>All Items Less Farm Produce (Year on Change)/2</th>\n","      <th>All Items Less Farm Produce (12 Months Avg. Change)/2</th>\n","      <th>All Items Less Farm Produce and Energy (Year on Change)/3</th>\n","      <th>All Items Less Farm Produce and Energy (12 Months Avg. Change)/3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2013.297297</td>\n","      <td>6.432432</td>\n","      <td>13.708147</td>\n","      <td>13.249768</td>\n","      <td>14.758571</td>\n","      <td>14.109653</td>\n","      <td>12.683707</td>\n","      <td>12.424788</td>\n","      <td>12.052896</td>\n","      <td>11.666564</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.245652</td>\n","      <td>3.451529</td>\n","      <td>5.906140</td>\n","      <td>4.603366</td>\n","      <td>7.740080</td>\n","      <td>6.188117</td>\n","      <td>6.773307</td>\n","      <td>5.384768</td>\n","      <td>5.666628</td>\n","      <td>4.397988</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2003.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>5.400000</td>\n","      <td>-3.700000</td>\n","      <td>1.500000</td>\n","      <td>-0.400000</td>\n","      <td>4.300000</td>\n","      <td>-6.500000</td>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2008.000000</td>\n","      <td>3.000000</td>\n","      <td>9.525000</td>\n","      <td>10.290000</td>\n","      <td>10.000000</td>\n","      <td>10.010000</td>\n","      <td>8.820000</td>\n","      <td>9.105000</td>\n","      <td>9.090000</td>\n","      <td>9.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2013.000000</td>\n","      <td>6.000000</td>\n","      <td>12.400000</td>\n","      <td>12.600000</td>\n","      <td>13.790000</td>\n","      <td>14.000000</td>\n","      <td>11.500000</td>\n","      <td>11.500000</td>\n","      <td>11.700000</td>\n","      <td>11.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2019.000000</td>\n","      <td>9.000000</td>\n","      <td>16.275000</td>\n","      <td>16.420000</td>\n","      <td>18.205000</td>\n","      <td>17.900000</td>\n","      <td>14.725000</td>\n","      <td>13.865000</td>\n","      <td>14.180000</td>\n","      <td>13.220000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2024.000000</td>\n","      <td>12.000000</td>\n","      <td>34.190000</td>\n","      <td>30.760000</td>\n","      <td>40.870000</td>\n","      <td>36.360000</td>\n","      <td>41.200000</td>\n","      <td>33.200000</td>\n","      <td>27.800000</td>\n","      <td>24.650000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ac87c14-5d7a-4e45-9104-739e70bd510d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5ac87c14-5d7a-4e45-9104-739e70bd510d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5ac87c14-5d7a-4e45-9104-739e70bd510d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d6def2e8-67c2-4250-95b2-aaca14afb3c1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6def2e8-67c2-4250-95b2-aaca14afb3c1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d6def2e8-67c2-4250-95b2-aaca14afb3c1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 873.2624524366246,\n        \"min\": 6.245652164638957,\n        \"max\": 2024.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.2972972972973,\n          2013.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.5735854299287,\n        \"min\": 1.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.4324324324324325,\n          6.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (Year on Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.28134621135413,\n        \"min\": 3.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.708146718146718,\n          12.4,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (12 Months Avg. Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.23604803306071,\n        \"min\": 4.603366389574933,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.24976833976834,\n          12.6,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (Year on Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.34543380006009,\n        \"min\": -3.7,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.758571428571425,\n          13.79,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (12 Months Avg. Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.13132692290661,\n        \"min\": 1.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.109652509652507,\n          14.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (Year on Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.6038017276306,\n        \"min\": -0.4,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.683706563706563,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (12 Months Avg. Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.49415735319536,\n        \"min\": 4.3,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.424787644787642,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (Year on Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.34494938288168,\n        \"min\": -6.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.052895752895752,\n          11.7,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (12 Months Avg. Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.04665387875889,\n        \"min\": 0.6,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.666563706563705,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Define the feature matrix X and target variable y\n","X = data[['All Items (12 Months Avg. Change)', 'Food (Year on Change)/1', 'Food (12 Months Avg. Change)/1',\n","          'All Items Less Farm Produce (Year on Change)/2', 'All Items Less Farm Produce (12 Months Avg. Change)/2',\n","         'All Items Less Farm Produce and Energy (Year on Change)/3',\n","          'All Items Less Farm Produce and Energy (12 Months Avg. Change)/3']]\n","y = data[ 'All Items (Year on Change)']\n","\n","# Split the data into training and test sets (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Standardize features if necessary\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"W1J5VBc_-wTf","executionInfo":{"status":"ok","timestamp":1728559198618,"user_tz":-60,"elapsed":22,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Instantiate the SVR model with an RBF kernel (Radial Basis Function kernel)\n","svr_model = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)\n","\n","# Train the model\n","svr_model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred_svr = svr_model.predict(X_test_scaled)"],"metadata":{"id":"uzj4X8W6-5e2","executionInfo":{"status":"ok","timestamp":1728559198618,"user_tz":-60,"elapsed":20,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Calculate MSE and R-squared\n","mse_svr = mean_squared_error(y_test, y_pred_svr)\n","r2_svr = r2_score(y_test, y_pred_svr)\n","rmse_svr = np.sqrt(mse_svr)\n","mae_svr = mean_absolute_error(y_test, y_pred_svr)\n","mape_svr = np.mean(np.abs((y_test - y_pred_svr) / y_test)) * 100\n","\n","print(f'Mean Squared Error (SVR): {mse_svr}')\n","print(f'Root Mean Squared Error (SVR): {rmse_svr}')\n","print(f'Mean Absolute Error (SVR): {mae_svr}')\n","print(f'Mean Absolute Percentage Error (SVR): {mape_svr}')\n","print(f'R-squared (SVR): {r2_svr}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aYq2zs_P_QlD","executionInfo":{"status":"ok","timestamp":1728559199487,"user_tz":-60,"elapsed":888,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"7089b036-f852-4349-b73c-814236962910"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (SVR): 0.4519731350995658\n","Root Mean Squared Error (SVR): 0.6722894726972644\n","Mean Absolute Error (SVR): 0.3763499559180369\n","Mean Absolute Percentage Error (SVR): 3.297970853489291\n","R-squared (SVR): 0.9858818598882767\n"]}]},{"cell_type":"code","source":["# Residual plot\n","residuals_svr = y_test - y_pred_svr\n","\n","plt.figure(figsize=(10,6))\n","plt.scatter(y_pred_svr, residuals_svr)\n","plt.axhline(0, color='red', linestyle='--')\n","plt.xlabel('Predicted Values (SVR)')\n","plt.ylabel('Residuals (SVR)')\n","plt.title('Residuals vs. Predicted Values (SVR)')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"Zad22tfm_ZgN","executionInfo":{"status":"ok","timestamp":1728559199488,"user_tz":-60,"elapsed":72,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"94752246-c97c-41e9-a2d8-e378a4826ecc"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Print actual and predicted values\n","for actual, predicted in zip(y_test, y_pred_svr):\n","    print(f\"Actual: {actual}, Predicted: {predicted}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"haW8iTV6_gOY","executionInfo":{"status":"ok","timestamp":1728559199490,"user_tz":-60,"elapsed":67,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"5aceb591-7c9e-4834-a2f8-667c4535b2da"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual: 14.0, Predicted: 13.94388387663222\n","Actual: 6.1, Predicted: 5.492030623272342\n","Actual: 23.6, Predicted: 22.917517435601308\n","Actual: 14.6, Predicted: 15.116396524205925\n","Actual: 8.2, Predicted: 8.501759044308159\n","Actual: 10.3, Predicted: 10.116403063057732\n","Actual: 12.26, Predicted: 12.352715847043015\n","Actual: 15.7, Predicted: 15.719585130830517\n","Actual: 8.4, Predicted: 8.53475912255908\n","Actual: 13.71, Predicted: 13.614268526163883\n","Actual: 14.4, Predicted: 14.52812215424639\n","Actual: 18.6, Predicted: 18.332636689072295\n","Actual: 28.2, Predicted: 28.121300504824305\n","Actual: 13.0, Predicted: 12.851373073010514\n","Actual: 7.8, Predicted: 6.910053268113501\n","Actual: 12.6, Predicted: 12.128355663823882\n","Actual: 12.9, Predicted: 15.706790583683837\n","Actual: 26.1, Predicted: 26.106424868482172\n","Actual: 10.2, Predicted: 9.884840082864642\n","Actual: 4.2, Predicted: 4.1327372224960826\n","Actual: 9.8, Predicted: 11.311206976796718\n","Actual: 15.9, Predicted: 16.05265555500607\n","Actual: 12.2, Predicted: 12.195477741518772\n","Actual: 15.13, Predicted: 15.31542269487209\n","Actual: 18.72, Predicted: 18.5743520976252\n","Actual: 17.5, Predicted: 17.69398421024882\n","Actual: 8.0, Predicted: 7.61280157159716\n","Actual: 15.63, Predicted: 15.64085364882066\n","Actual: 21.09, Predicted: 21.11682293732896\n","Actual: 8.0, Predicted: 7.907861987867918\n","Actual: 13.0, Predicted: 11.729135149520655\n","Actual: 9.4, Predicted: 9.404712535665226\n","Actual: 12.4, Predicted: 12.593469604144587\n","Actual: 11.24, Predicted: 11.202198221644437\n","Actual: 21.3, Predicted: 21.70723325998887\n","Actual: 11.9, Predicted: 10.061919782226468\n","Actual: 8.6, Predicted: 8.173865814185405\n","Actual: 12.0, Predicted: 11.515006267718746\n","Actual: 13.6, Predicted: 13.56278490684791\n","Actual: 10.9, Predicted: 12.438095876586281\n","Actual: 13.3, Predicted: 13.267938711239339\n","Actual: 10.7, Predicted: 9.167371880865584\n","Actual: 9.0, Predicted: 8.900532045845267\n","Actual: 21.91, Predicted: 21.72465959517472\n","Actual: 11.28, Predicted: 11.270175221636876\n","Actual: 15.98, Predicted: 15.997660406739861\n","Actual: 34.19, Predicted: 34.011367953562164\n","Actual: 11.23, Predicted: 11.350550823609098\n","Actual: 11.61, Predicted: 11.722878296579935\n","Actual: 13.0, Predicted: 12.664604519390664\n","Actual: 18.33, Predicted: 18.33077453761632\n","Actual: 19.8, Predicted: 19.675223434224677\n"]}]},{"cell_type":"code","source":["# Q-Q plot\n","plt.figure(figsize=(8,6))\n","stats.probplot(residuals_svr, dist=\"norm\", plot=plt)\n","plt.title('Q-Q Plot')\n","plt.show()"],"metadata":{"id":"2Rb_rRcF_ref","colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1728559199491,"user_tz":-60,"elapsed":61,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"af1c9824-cb8a-4d60-d00b-8636b078f691"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate VIF for each variable\n","vif_data = pd.DataFrame()\n","vif_data[\"feature\"] = X.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\n","\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T80AGNlOkmw4","executionInfo":{"status":"ok","timestamp":1728559199492,"user_tz":-60,"elapsed":51,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"26e56114-471e-465a-d7bf-812a2aa38154"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["                                             feature          VIF\n","0                  All Items (12 Months Avg. Change)  1763.096852\n","1                            Food (Year on Change)/1    21.061671\n","2                     Food (12 Months Avg. Change)/1   868.356867\n","3     All Items Less Farm Produce (Year on Change)/2    31.578633\n","4  All Items Less Farm Produce (12 Months Avg. Ch...   415.906130\n","5  All Items Less Farm Produce and Energy (Year o...    43.266383\n","6  All Items Less Farm Produce and Energy (12 Mon...   123.857932\n"]}]},{"cell_type":"code","source":["df_svm = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_svr})"],"metadata":{"id":"gCCmrCRbI3IS","executionInfo":{"status":"ok","timestamp":1728559199493,"user_tz":-60,"elapsed":42,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Save to Excel\n","df_svm.to_excel('support_vector_machine_results.xlsx', index=False)"],"metadata":{"id":"fImR6YfbI3Yk","executionInfo":{"status":"ok","timestamp":1728559200030,"user_tz":-60,"elapsed":577,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":14,"outputs":[]}]}