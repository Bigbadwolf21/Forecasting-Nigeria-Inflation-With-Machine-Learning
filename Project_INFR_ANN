{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOGHfdBiztLuR7crk2+w/OE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"XrFVbohHPEuU","executionInfo":{"status":"ok","timestamp":1728561555282,"user_tz":-60,"elapsed":14839,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"outputs":[],"source":["# Import all necessary libraries\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential\n","from keras.layers import Dense"]},{"cell_type":"code","source":["# Mount file\n","from google.colab import files\n","file_upload = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"UfH7fLuvMAo4","executionInfo":{"status":"ok","timestamp":1728561597624,"user_tz":-60,"elapsed":42410,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"cfe21d27-c8a3-49a7-e0e2-5a22c8ebb323"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-749b36da-aa46-4848-a10b-3959ba186287\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-749b36da-aa46-4848-a10b-3959ba186287\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Inflation_Rates - Inflation_Rate.csv to Inflation_Rates - Inflation_Rate.csv\n"]}]},{"cell_type":"code","source":["#Read the dataset\n","data = pd.read_csv(\"Inflation_Rates - Inflation_Rate.csv\")"],"metadata":{"id":"OX315LSOMWOc","executionInfo":{"status":"ok","timestamp":1728561597626,"user_tz":-60,"elapsed":39,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# General information about the dataset\n","data.info()\n","\n","# Statistical info\n","data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":754},"collapsed":true,"id":"t2fQm-__MlNd","executionInfo":{"status":"ok","timestamp":1728561597626,"user_tz":-60,"elapsed":34,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"14d0e8ee-6de0-47e3-a542-a1cde79a18e9"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 259 entries, 0 to 258\n","Data columns (total 10 columns):\n"," #   Column                                                            Non-Null Count  Dtype  \n","---  ------                                                            --------------  -----  \n"," 0   Year                                                              259 non-null    int64  \n"," 1   Month                                                             259 non-null    int64  \n"," 2   All Items (Year on Change)                                        259 non-null    float64\n"," 3   All Items (12 Months Avg. Change)                                 259 non-null    float64\n"," 4   Food (Year on Change)/1                                           259 non-null    float64\n"," 5   Food (12 Months Avg. Change)/1                                    259 non-null    float64\n"," 6   All Items Less Farm Produce (Year on Change)/2                    259 non-null    float64\n"," 7   All Items Less Farm Produce (12 Months Avg. Change)/2             259 non-null    float64\n"," 8   All Items Less Farm Produce and Energy (Year on Change)/3         259 non-null    float64\n"," 9   All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  259 non-null    float64\n","dtypes: float64(8), int64(2)\n","memory usage: 20.4 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["              Year       Month  All Items (Year on Change)  \\\n","count   259.000000  259.000000                  259.000000   \n","mean   2013.297297    6.432432                   13.708147   \n","std       6.245652    3.451529                    5.906140   \n","min    2003.000000    1.000000                    3.000000   \n","25%    2008.000000    3.000000                    9.525000   \n","50%    2013.000000    6.000000                   12.400000   \n","75%    2019.000000    9.000000                   16.275000   \n","max    2024.000000   12.000000                   34.190000   \n","\n","       All Items (12 Months Avg. Change)  Food (Year on Change)/1  \\\n","count                         259.000000               259.000000   \n","mean                           13.249768                14.758571   \n","std                             4.603366                 7.740080   \n","min                             5.400000                -3.700000   \n","25%                            10.290000                10.000000   \n","50%                            12.600000                13.790000   \n","75%                            16.420000                18.205000   \n","max                            30.760000                40.870000   \n","\n","       Food (12 Months Avg. Change)/1  \\\n","count                      259.000000   \n","mean                        14.109653   \n","std                          6.188117   \n","min                          1.500000   \n","25%                         10.010000   \n","50%                         14.000000   \n","75%                         17.900000   \n","max                         36.360000   \n","\n","       All Items Less Farm Produce (Year on Change)/2  \\\n","count                                      259.000000   \n","mean                                        12.683707   \n","std                                          6.773307   \n","min                                         -0.400000   \n","25%                                          8.820000   \n","50%                                         11.500000   \n","75%                                         14.725000   \n","max                                         41.200000   \n","\n","       All Items Less Farm Produce (12 Months Avg. Change)/2  \\\n","count                                         259.000000       \n","mean                                           12.424788       \n","std                                             5.384768       \n","min                                             4.300000       \n","25%                                             9.105000       \n","50%                                            11.500000       \n","75%                                            13.865000       \n","max                                            33.200000       \n","\n","       All Items Less Farm Produce and Energy (Year on Change)/3  \\\n","count                                         259.000000           \n","mean                                           12.052896           \n","std                                             5.666628           \n","min                                            -6.500000           \n","25%                                             9.090000           \n","50%                                            11.700000           \n","75%                                            14.180000           \n","max                                            27.800000           \n","\n","       All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  \n","count                                         259.000000                 \n","mean                                           11.666564                 \n","std                                             4.397988                 \n","min                                             0.600000                 \n","25%                                             9.300000                 \n","50%                                            11.500000                 \n","75%                                            13.220000                 \n","max                                            24.650000                 "],"text/html":["\n","  <div id=\"df-6f9a3a79-62fd-49b2-b1bf-17c4eba74e34\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>All Items (Year on Change)</th>\n","      <th>All Items (12 Months Avg. Change)</th>\n","      <th>Food (Year on Change)/1</th>\n","      <th>Food (12 Months Avg. Change)/1</th>\n","      <th>All Items Less Farm Produce (Year on Change)/2</th>\n","      <th>All Items Less Farm Produce (12 Months Avg. Change)/2</th>\n","      <th>All Items Less Farm Produce and Energy (Year on Change)/3</th>\n","      <th>All Items Less Farm Produce and Energy (12 Months Avg. Change)/3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2013.297297</td>\n","      <td>6.432432</td>\n","      <td>13.708147</td>\n","      <td>13.249768</td>\n","      <td>14.758571</td>\n","      <td>14.109653</td>\n","      <td>12.683707</td>\n","      <td>12.424788</td>\n","      <td>12.052896</td>\n","      <td>11.666564</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.245652</td>\n","      <td>3.451529</td>\n","      <td>5.906140</td>\n","      <td>4.603366</td>\n","      <td>7.740080</td>\n","      <td>6.188117</td>\n","      <td>6.773307</td>\n","      <td>5.384768</td>\n","      <td>5.666628</td>\n","      <td>4.397988</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2003.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>5.400000</td>\n","      <td>-3.700000</td>\n","      <td>1.500000</td>\n","      <td>-0.400000</td>\n","      <td>4.300000</td>\n","      <td>-6.500000</td>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2008.000000</td>\n","      <td>3.000000</td>\n","      <td>9.525000</td>\n","      <td>10.290000</td>\n","      <td>10.000000</td>\n","      <td>10.010000</td>\n","      <td>8.820000</td>\n","      <td>9.105000</td>\n","      <td>9.090000</td>\n","      <td>9.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2013.000000</td>\n","      <td>6.000000</td>\n","      <td>12.400000</td>\n","      <td>12.600000</td>\n","      <td>13.790000</td>\n","      <td>14.000000</td>\n","      <td>11.500000</td>\n","      <td>11.500000</td>\n","      <td>11.700000</td>\n","      <td>11.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2019.000000</td>\n","      <td>9.000000</td>\n","      <td>16.275000</td>\n","      <td>16.420000</td>\n","      <td>18.205000</td>\n","      <td>17.900000</td>\n","      <td>14.725000</td>\n","      <td>13.865000</td>\n","      <td>14.180000</td>\n","      <td>13.220000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2024.000000</td>\n","      <td>12.000000</td>\n","      <td>34.190000</td>\n","      <td>30.760000</td>\n","      <td>40.870000</td>\n","      <td>36.360000</td>\n","      <td>41.200000</td>\n","      <td>33.200000</td>\n","      <td>27.800000</td>\n","      <td>24.650000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f9a3a79-62fd-49b2-b1bf-17c4eba74e34')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6f9a3a79-62fd-49b2-b1bf-17c4eba74e34 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6f9a3a79-62fd-49b2-b1bf-17c4eba74e34');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-46ff37ef-a193-40a1-9b5a-399eb4252908\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46ff37ef-a193-40a1-9b5a-399eb4252908')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-46ff37ef-a193-40a1-9b5a-399eb4252908 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 873.2624524366246,\n        \"min\": 6.245652164638957,\n        \"max\": 2024.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.2972972972973,\n          2013.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.5735854299287,\n        \"min\": 1.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.4324324324324325,\n          6.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (Year on Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.28134621135413,\n        \"min\": 3.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.708146718146718,\n          12.4,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (12 Months Avg. Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.23604803306071,\n        \"min\": 4.603366389574933,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.24976833976834,\n          12.6,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (Year on Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.34543380006009,\n        \"min\": -3.7,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.758571428571425,\n          13.79,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (12 Months Avg. Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.13132692290661,\n        \"min\": 1.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.109652509652507,\n          14.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (Year on Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.6038017276306,\n        \"min\": -0.4,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.683706563706563,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (12 Months Avg. Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.49415735319536,\n        \"min\": 4.3,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.424787644787642,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (Year on Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.34494938288168,\n        \"min\": -6.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.052895752895752,\n          11.7,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (12 Months Avg. Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.04665387875889,\n        \"min\": 0.6,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.666563706563705,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Define the feature matrix X and target variable y\n","X = data[['All Items (12 Months Avg. Change)', 'Food (Year on Change)/1', 'Food (12 Months Avg. Change)/1',\n","          'All Items Less Farm Produce (Year on Change)/2', 'All Items Less Farm Produce (12 Months Avg. Change)/2',\n","         'All Items Less Farm Produce and Energy (Year on Change)/3',\n","          'All Items Less Farm Produce and Energy (12 Months Avg. Change)/3']]\n","y = data[ 'All Items (Year on Change)']\n","\n","# Split the data into training and test sets (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Standardize features if necessary\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"d7C5qIlfMqh2","executionInfo":{"status":"ok","timestamp":1728561598030,"user_tz":-60,"elapsed":5,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Initialize the ANN model\n","ann_model = Sequential()\n","\n","# Input layer and the first hidden layer with 64 neurons\n","ann_model.add(Dense(units=64, activation='relu', input_shape=(X_train_scaled.shape[1],)))\n","\n","# Second hidden layer with 32 neurons\n","ann_model.add(Dense(units=32, activation='relu'))\n","\n","# Output layer with 1 neuron (since it's a regression problem)\n","ann_model.add(Dense(units=1, activation='linear'))\n","\n","# Compile the ANN model\n","ann_model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","# Train the model\n","ann_model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, validation_split=0.2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-FfvKy2iNDnt","executionInfo":{"status":"ok","timestamp":1728561608427,"user_tz":-60,"elapsed":10401,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"08c55005-33bb-4715-b17f-e4b4b001694b"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - loss: 222.7998 - val_loss: 200.2726\n","Epoch 2/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 208.0699 - val_loss: 188.7847\n","Epoch 3/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 195.9958 - val_loss: 177.3747\n","Epoch 4/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 170.2854 - val_loss: 165.6313\n","Epoch 5/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 168.4514 - val_loss: 153.0434\n","Epoch 6/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 159.4516 - val_loss: 139.4902\n","Epoch 7/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 154.1934 - val_loss: 125.2718\n","Epoch 8/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 132.3361 - val_loss: 110.7832\n","Epoch 9/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 120.7907 - val_loss: 95.8520\n","Epoch 10/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 92.7255 - val_loss: 82.5621\n","Epoch 11/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 89.5584 - val_loss: 70.8814\n","Epoch 12/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 71.5096 - val_loss: 61.7927\n","Epoch 13/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 63.3037 - val_loss: 55.0273\n","Epoch 14/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 53.0899 - val_loss: 51.1319\n","Epoch 15/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 47.4002 - val_loss: 49.4794\n","Epoch 16/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 45.4607 - val_loss: 49.0763\n","Epoch 17/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 41.0267 - val_loss: 48.6819\n","Epoch 18/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 36.2605 - val_loss: 47.2251\n","Epoch 19/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 38.6553 - val_loss: 44.6478\n","Epoch 20/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 29.9555 - val_loss: 41.8036\n","Epoch 21/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 35.5085 - val_loss: 37.4266\n","Epoch 22/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 30.4678 - val_loss: 34.4521\n","Epoch 23/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 29.1849 - val_loss: 31.6369\n","Epoch 24/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 28.0867 - val_loss: 29.4036\n","Epoch 25/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 26.1991 - val_loss: 27.7124\n","Epoch 26/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 23.3426 - val_loss: 26.4384\n","Epoch 27/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 22.8373 - val_loss: 25.2670\n","Epoch 28/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 19.9277 - val_loss: 24.1901\n","Epoch 29/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 21.6793 - val_loss: 22.8003\n","Epoch 30/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 18.8569 - val_loss: 21.5471\n","Epoch 31/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 18.5838 - val_loss: 20.0523\n","Epoch 32/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 16.8771 - val_loss: 18.8570\n","Epoch 33/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 16.4614 - val_loss: 17.5594\n","Epoch 34/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 13.5967 - val_loss: 16.5224\n","Epoch 35/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 13.2941 - val_loss: 15.2999\n","Epoch 36/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 12.5360 - val_loss: 14.1931\n","Epoch 37/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 12.7819 - val_loss: 13.4931\n","Epoch 38/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 12.0090 - val_loss: 12.9273\n","Epoch 39/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 10.0032 - val_loss: 12.2719\n","Epoch 40/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 10.8732 - val_loss: 11.6950\n","Epoch 41/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.9147 - val_loss: 11.0510\n","Epoch 42/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 10.5454 - val_loss: 10.3215\n","Epoch 43/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 8.4011 - val_loss: 9.5938\n","Epoch 44/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 9.2003 - val_loss: 9.0059\n","Epoch 45/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 8.7582 - val_loss: 8.6837\n","Epoch 46/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 7.8303 - val_loss: 8.3005\n","Epoch 47/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 7.5030 - val_loss: 7.8906\n","Epoch 48/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 7.6103 - val_loss: 7.3884\n","Epoch 49/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 6.7580 - val_loss: 6.9057\n","Epoch 50/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 6.9408 - val_loss: 6.5920\n","Epoch 51/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 6.0002 - val_loss: 6.2935\n","Epoch 52/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 5.3979 - val_loss: 6.0694\n","Epoch 53/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 5.8004 - val_loss: 5.8324\n","Epoch 54/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 5.8413 - val_loss: 5.4488\n","Epoch 55/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 5.4264 - val_loss: 5.1482\n","Epoch 56/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 4.8590 - val_loss: 4.8967\n","Epoch 57/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 4.9300 - val_loss: 4.6431\n","Epoch 58/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 4.5244 - val_loss: 4.4877\n","Epoch 59/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 4.7057 - val_loss: 4.2699\n","Epoch 60/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 4.4086 - val_loss: 4.0370\n","Epoch 61/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 3.2953 - val_loss: 3.8198\n","Epoch 62/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 3.8414 - val_loss: 3.6911\n","Epoch 63/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 3.7008 - val_loss: 3.6021\n","Epoch 64/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 3.9889 - val_loss: 3.3530\n","Epoch 65/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 3.2018 - val_loss: 3.2642\n","Epoch 66/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.8842 - val_loss: 3.1457\n","Epoch 67/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 3.1032 - val_loss: 3.0019\n","Epoch 68/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.8754 - val_loss: 2.9197\n","Epoch 69/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 2.8535 - val_loss: 2.8433\n","Epoch 70/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.7085 - val_loss: 2.7048\n","Epoch 71/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.5290 - val_loss: 2.4692\n","Epoch 72/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 2.4776 - val_loss: 2.3074\n","Epoch 73/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 2.2570 - val_loss: 2.2119\n","Epoch 74/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.1521 - val_loss: 2.1637\n","Epoch 75/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.0489 - val_loss: 2.1209\n","Epoch 76/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.0700 - val_loss: 2.0568\n","Epoch 77/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 2.0514 - val_loss: 1.9840\n","Epoch 78/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.5533 - val_loss: 1.9000\n","Epoch 79/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.8105 - val_loss: 1.8149\n","Epoch 80/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.4602 - val_loss: 1.7266\n","Epoch 81/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.7308 - val_loss: 1.6222\n","Epoch 82/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.4411 - val_loss: 1.5696\n","Epoch 83/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - loss: 1.3691 - val_loss: 1.5087\n","Epoch 84/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3605 - val_loss: 1.4806\n","Epoch 85/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 1.1385 - val_loss: 1.4548\n","Epoch 86/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.3272 - val_loss: 1.3811\n","Epoch 87/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step - loss: 1.0667 - val_loss: 1.3241\n","Epoch 88/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.1264 - val_loss: 1.2903\n","Epoch 89/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.1122 - val_loss: 1.2482\n","Epoch 90/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.8521 - val_loss: 1.2331\n","Epoch 91/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.9228 - val_loss: 1.2263\n","Epoch 92/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.9089 - val_loss: 1.2226\n","Epoch 93/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.9259 - val_loss: 1.1661\n","Epoch 94/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.8149 - val_loss: 1.1014\n","Epoch 95/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - loss: 0.7705 - val_loss: 1.0688\n","Epoch 96/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 0.8154 - val_loss: 1.0418\n","Epoch 97/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - loss: 0.7350 - val_loss: 1.0308\n","Epoch 98/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6972 - val_loss: 1.0395\n","Epoch 99/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.6772 - val_loss: 1.0182\n","Epoch 100/100\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.7038 - val_loss: 0.9673\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x7898d12563b0>"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Make predictions on the test set\n","y_pred_ann = ann_model.predict(X_test_scaled)\n","\n","# Evaluate model performance using MSE and R-squared\n","mse_ann = mean_squared_error(y_test, y_pred_ann)\n","r2_ann = r2_score(y_test, y_pred_ann)\n","rmse_ann = np.sqrt(mse_ann)\n","mae_ann = mean_absolute_error(y_test, y_pred_ann)\n","# mape_ann = np.mean(np.abs((y_test - y_pred_ann) / y_test)) * 100\n","\n","# Print evaluation metrics\n","print(\"ANN Model Evaluation Metrics:\")\n","\n","print(f'Mean Squared Error (ANN): {mse_ann}')\n","print(f'Mean Absolute Error (ANN): {mae_ann}')\n","print(f'Root Mean Squared Error (ANN): {rmse_ann}')\n","# print(f'Mean Absolute Percentage Error (ANN): {mape_ann}')\n","print(f'R-squared (ANN): {r2_ann}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SOEIHO4pN04r","executionInfo":{"status":"ok","timestamp":1728561608427,"user_tz":-60,"elapsed":26,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"0c239f68-cacd-434b-d528-7dd056862423"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step\n","ANN Model Evaluation Metrics:\n","Mean Squared Error (ANN): 2.172480385050706\n","Mean Absolute Error (ANN): 0.879668960571289\n","Root Mean Squared Error (ANN): 1.4739336433675385\n","R-squared (ANN): 0.9321389257807106\n"]}]},{"cell_type":"code","source":["# Residual plot\n","residuals_ann = y_test - y_pred_ann.flatten()\n","\n","plt.figure(figsize=(10,6))\n","plt.scatter(y_pred_ann, residuals_ann)\n","plt.axhline(0, color='red', linestyle='--')\n","plt.xlabel('Predicted Values (ANN)')\n","plt.ylabel('Residuals (ANN)')\n","plt.title('Residuals vs. Predicted Values (ANN)')\n","plt.show()\n"],"metadata":{"id":"yVDPcM-fOGfF","colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1728561608935,"user_tz":-60,"elapsed":526,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"2b0abbac-791b-4a4b-cb0d-61396009746b"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 1. Make predictions on the test set (already done, but repeating for clarity)\n","# y_pred_ann = ann_model.predict(X_test_scaled)\n","\n","# Print actual and predicted values side by side for comparison\n","print(\"Actual values vs Predicted values (ANN):\")\n","for actual, predicted in zip(y_test, y_pred_ann):\n","    print(f\"Actual: {actual:.2f}, Predicted: {predicted[0]:.2f}\")\n"],"metadata":{"id":"-d2ulOnjOldk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728561609357,"user_tz":-60,"elapsed":429,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"eedb81f7-e218-4d7c-fb77-a026eb1a57d3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual values vs Predicted values (ANN):\n","Actual: 14.00, Predicted: 13.58\n","Actual: 6.10, Predicted: 5.90\n","Actual: 23.60, Predicted: 26.68\n","Actual: 14.60, Predicted: 15.37\n","Actual: 8.20, Predicted: 8.85\n","Actual: 10.30, Predicted: 9.09\n","Actual: 12.26, Predicted: 12.45\n","Actual: 15.70, Predicted: 15.36\n","Actual: 8.40, Predicted: 7.54\n","Actual: 13.71, Predicted: 14.09\n","Actual: 14.40, Predicted: 14.27\n","Actual: 18.60, Predicted: 20.10\n","Actual: 28.20, Predicted: 27.95\n","Actual: 13.00, Predicted: 12.64\n","Actual: 7.80, Predicted: 8.91\n","Actual: 12.60, Predicted: 12.34\n","Actual: 12.90, Predicted: 20.53\n","Actual: 26.10, Predicted: 27.41\n","Actual: 10.20, Predicted: 8.96\n","Actual: 4.20, Predicted: 4.44\n","Actual: 9.80, Predicted: 10.83\n","Actual: 15.90, Predicted: 16.41\n","Actual: 12.20, Predicted: 12.25\n","Actual: 15.13, Predicted: 15.79\n","Actual: 18.72, Predicted: 16.44\n","Actual: 17.50, Predicted: 17.23\n","Actual: 8.00, Predicted: 7.86\n","Actual: 15.63, Predicted: 15.66\n","Actual: 21.09, Predicted: 20.68\n","Actual: 8.00, Predicted: 7.77\n","Actual: 13.00, Predicted: 14.05\n","Actual: 9.40, Predicted: 9.13\n","Actual: 12.40, Predicted: 12.12\n","Actual: 11.24, Predicted: 11.19\n","Actual: 21.30, Predicted: 22.84\n","Actual: 11.90, Predicted: 9.44\n","Actual: 8.60, Predicted: 8.20\n","Actual: 12.00, Predicted: 9.96\n","Actual: 13.60, Predicted: 13.30\n","Actual: 10.90, Predicted: 11.61\n","Actual: 13.30, Predicted: 14.35\n","Actual: 10.70, Predicted: 13.19\n","Actual: 9.00, Predicted: 8.81\n","Actual: 21.91, Predicted: 21.39\n","Actual: 11.28, Predicted: 11.42\n","Actual: 15.98, Predicted: 16.02\n","Actual: 34.19, Predicted: 35.18\n","Actual: 11.23, Predicted: 11.58\n","Actual: 11.61, Predicted: 11.99\n","Actual: 13.00, Predicted: 12.41\n","Actual: 18.33, Predicted: 16.53\n","Actual: 19.80, Predicted: 19.42\n"]}]},{"cell_type":"code","source":["# Save the test model in a Dataframe\n","# df_ann = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_ann})\n","# Save the test model in a Dataframe\n","df_ann = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_ann.flatten()})"],"metadata":{"id":"ror3HobUPIlV","executionInfo":{"status":"ok","timestamp":1728561790987,"user_tz":-60,"elapsed":556,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Export to Excel\n","df_ann.to_excel('ann_results.xlsx', index=False)"],"metadata":{"id":"PMDWbzpOSOpd","executionInfo":{"status":"ok","timestamp":1728561793351,"user_tz":-60,"elapsed":846,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"5_s_njanT8Pa"},"execution_count":null,"outputs":[]}]}