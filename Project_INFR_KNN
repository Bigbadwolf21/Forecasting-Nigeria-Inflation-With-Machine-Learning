{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN6LGjePOrcTbUqg3VlFVyU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"UBr2ClEIIydf","executionInfo":{"status":"ok","timestamp":1728559884406,"user_tz":-60,"elapsed":6546,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"outputs":[],"source":["# Import all the necessary libraries to build and evaluate the inflation model\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import scipy.stats as stats\n","from statsmodels.stats.outliers_influence import variance_inflation_factor"]},{"cell_type":"code","source":["# Mount file\n","from google.colab import files\n","file_upload = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"xMDSsyKmKhsb","executionInfo":{"status":"ok","timestamp":1728559928394,"user_tz":-60,"elapsed":44036,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"6fd2cf40-bcc8-4252-eb74-a9ecaee9a970","collapsed":true},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a61b2aae-a357-4216-b3f2-63d399ec2c88\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a61b2aae-a357-4216-b3f2-63d399ec2c88\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Inflation_Rates - Inflation_Rate.csv to Inflation_Rates - Inflation_Rate.csv\n"]}]},{"cell_type":"code","source":["#Read the dataset\n","data = pd.read_csv(\"Inflation_Rates - Inflation_Rate.csv\")"],"metadata":{"id":"dIZ9OCHcLIRi","executionInfo":{"status":"ok","timestamp":1728559928394,"user_tz":-60,"elapsed":31,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# General information about the dataset\n","data.info()\n","\n","# Statistical info\n","data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":665},"collapsed":true,"id":"7BXKzGa_LUOA","executionInfo":{"status":"ok","timestamp":1728559928395,"user_tz":-60,"elapsed":31,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"236a6561-4fe9-4a71-bb74-20635ccaa198"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 259 entries, 0 to 258\n","Data columns (total 10 columns):\n"," #   Column                                                            Non-Null Count  Dtype  \n","---  ------                                                            --------------  -----  \n"," 0   Year                                                              259 non-null    int64  \n"," 1   Month                                                             259 non-null    int64  \n"," 2   All Items (Year on Change)                                        259 non-null    float64\n"," 3   All Items (12 Months Avg. Change)                                 259 non-null    float64\n"," 4   Food (Year on Change)/1                                           259 non-null    float64\n"," 5   Food (12 Months Avg. Change)/1                                    259 non-null    float64\n"," 6   All Items Less Farm Produce (Year on Change)/2                    259 non-null    float64\n"," 7   All Items Less Farm Produce (12 Months Avg. Change)/2             259 non-null    float64\n"," 8   All Items Less Farm Produce and Energy (Year on Change)/3         259 non-null    float64\n"," 9   All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  259 non-null    float64\n","dtypes: float64(8), int64(2)\n","memory usage: 20.4 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["              Year       Month  All Items (Year on Change)  \\\n","count   259.000000  259.000000                  259.000000   \n","mean   2013.297297    6.432432                   13.708147   \n","std       6.245652    3.451529                    5.906140   \n","min    2003.000000    1.000000                    3.000000   \n","25%    2008.000000    3.000000                    9.525000   \n","50%    2013.000000    6.000000                   12.400000   \n","75%    2019.000000    9.000000                   16.275000   \n","max    2024.000000   12.000000                   34.190000   \n","\n","       All Items (12 Months Avg. Change)  Food (Year on Change)/1  \\\n","count                         259.000000               259.000000   \n","mean                           13.249768                14.758571   \n","std                             4.603366                 7.740080   \n","min                             5.400000                -3.700000   \n","25%                            10.290000                10.000000   \n","50%                            12.600000                13.790000   \n","75%                            16.420000                18.205000   \n","max                            30.760000                40.870000   \n","\n","       Food (12 Months Avg. Change)/1  \\\n","count                      259.000000   \n","mean                        14.109653   \n","std                          6.188117   \n","min                          1.500000   \n","25%                         10.010000   \n","50%                         14.000000   \n","75%                         17.900000   \n","max                         36.360000   \n","\n","       All Items Less Farm Produce (Year on Change)/2  \\\n","count                                      259.000000   \n","mean                                        12.683707   \n","std                                          6.773307   \n","min                                         -0.400000   \n","25%                                          8.820000   \n","50%                                         11.500000   \n","75%                                         14.725000   \n","max                                         41.200000   \n","\n","       All Items Less Farm Produce (12 Months Avg. Change)/2  \\\n","count                                         259.000000       \n","mean                                           12.424788       \n","std                                             5.384768       \n","min                                             4.300000       \n","25%                                             9.105000       \n","50%                                            11.500000       \n","75%                                            13.865000       \n","max                                            33.200000       \n","\n","       All Items Less Farm Produce and Energy (Year on Change)/3  \\\n","count                                         259.000000           \n","mean                                           12.052896           \n","std                                             5.666628           \n","min                                            -6.500000           \n","25%                                             9.090000           \n","50%                                            11.700000           \n","75%                                            14.180000           \n","max                                            27.800000           \n","\n","       All Items Less Farm Produce and Energy (12 Months Avg. Change)/3  \n","count                                         259.000000                 \n","mean                                           11.666564                 \n","std                                             4.397988                 \n","min                                             0.600000                 \n","25%                                             9.300000                 \n","50%                                            11.500000                 \n","75%                                            13.220000                 \n","max                                            24.650000                 "],"text/html":["\n","  <div id=\"df-fe9321bf-67a8-45e4-8d9f-c70158d4ee51\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Month</th>\n","      <th>All Items (Year on Change)</th>\n","      <th>All Items (12 Months Avg. Change)</th>\n","      <th>Food (Year on Change)/1</th>\n","      <th>Food (12 Months Avg. Change)/1</th>\n","      <th>All Items Less Farm Produce (Year on Change)/2</th>\n","      <th>All Items Less Farm Produce (12 Months Avg. Change)/2</th>\n","      <th>All Items Less Farm Produce and Energy (Year on Change)/3</th>\n","      <th>All Items Less Farm Produce and Energy (12 Months Avg. Change)/3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","      <td>259.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2013.297297</td>\n","      <td>6.432432</td>\n","      <td>13.708147</td>\n","      <td>13.249768</td>\n","      <td>14.758571</td>\n","      <td>14.109653</td>\n","      <td>12.683707</td>\n","      <td>12.424788</td>\n","      <td>12.052896</td>\n","      <td>11.666564</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.245652</td>\n","      <td>3.451529</td>\n","      <td>5.906140</td>\n","      <td>4.603366</td>\n","      <td>7.740080</td>\n","      <td>6.188117</td>\n","      <td>6.773307</td>\n","      <td>5.384768</td>\n","      <td>5.666628</td>\n","      <td>4.397988</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2003.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>5.400000</td>\n","      <td>-3.700000</td>\n","      <td>1.500000</td>\n","      <td>-0.400000</td>\n","      <td>4.300000</td>\n","      <td>-6.500000</td>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2008.000000</td>\n","      <td>3.000000</td>\n","      <td>9.525000</td>\n","      <td>10.290000</td>\n","      <td>10.000000</td>\n","      <td>10.010000</td>\n","      <td>8.820000</td>\n","      <td>9.105000</td>\n","      <td>9.090000</td>\n","      <td>9.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2013.000000</td>\n","      <td>6.000000</td>\n","      <td>12.400000</td>\n","      <td>12.600000</td>\n","      <td>13.790000</td>\n","      <td>14.000000</td>\n","      <td>11.500000</td>\n","      <td>11.500000</td>\n","      <td>11.700000</td>\n","      <td>11.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2019.000000</td>\n","      <td>9.000000</td>\n","      <td>16.275000</td>\n","      <td>16.420000</td>\n","      <td>18.205000</td>\n","      <td>17.900000</td>\n","      <td>14.725000</td>\n","      <td>13.865000</td>\n","      <td>14.180000</td>\n","      <td>13.220000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2024.000000</td>\n","      <td>12.000000</td>\n","      <td>34.190000</td>\n","      <td>30.760000</td>\n","      <td>40.870000</td>\n","      <td>36.360000</td>\n","      <td>41.200000</td>\n","      <td>33.200000</td>\n","      <td>27.800000</td>\n","      <td>24.650000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe9321bf-67a8-45e4-8d9f-c70158d4ee51')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fe9321bf-67a8-45e4-8d9f-c70158d4ee51 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fe9321bf-67a8-45e4-8d9f-c70158d4ee51');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6d30333d-3155-486e-930a-4eb110b2c6a4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d30333d-3155-486e-930a-4eb110b2c6a4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6d30333d-3155-486e-930a-4eb110b2c6a4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 873.2624524366246,\n        \"min\": 6.245652164638957,\n        \"max\": 2024.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.2972972972973,\n          2013.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.5735854299287,\n        \"min\": 1.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.4324324324324325,\n          6.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (Year on Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.28134621135413,\n        \"min\": 3.0,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.708146718146718,\n          12.4,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items (12 Months Avg. Change)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.23604803306071,\n        \"min\": 4.603366389574933,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.24976833976834,\n          12.6,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (Year on Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.34543380006009,\n        \"min\": -3.7,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.758571428571425,\n          13.79,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food (12 Months Avg. Change)/1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.13132692290661,\n        \"min\": 1.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.109652509652507,\n          14.0,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (Year on Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.6038017276306,\n        \"min\": -0.4,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.683706563706563,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce (12 Months Avg. Change)/2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.49415735319536,\n        \"min\": 4.3,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.424787644787642,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (Year on Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.34494938288168,\n        \"min\": -6.5,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.052895752895752,\n          11.7,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All Items Less Farm Produce and Energy (12 Months Avg. Change)/3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.04665387875889,\n        \"min\": 0.6,\n        \"max\": 259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.666563706563705,\n          11.5,\n          259.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Define the feature matrix X and target variable y\n","X = data[['All Items (12 Months Avg. Change)', 'Food (Year on Change)/1', 'Food (12 Months Avg. Change)/1',\n","          'All Items Less Farm Produce (Year on Change)/2', 'All Items Less Farm Produce (12 Months Avg. Change)/2',\n","         'All Items Less Farm Produce and Energy (Year on Change)/3',\n","          'All Items Less Farm Produce and Energy (12 Months Avg. Change)/3']]\n","y = data[ 'All Items (Year on Change)']\n","\n","# Split the data into training and test sets (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Standardize features if necessary\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"swXMo-D9LdRg","executionInfo":{"status":"ok","timestamp":1728559928396,"user_tz":-60,"elapsed":25,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Instantiate the KNN model with an initial guess for n_neighbors (e.g., 5)\n","knn_model = KNeighborsRegressor(n_neighbors=5)\n","\n","# Train the model\n","knn_model.fit(X_train_scaled, y_train)\n","\n","# Make predictions on the test set\n","y_pred_knn = knn_model.predict(X_test_scaled)"],"metadata":{"id":"mzNMANhJLkIe","executionInfo":{"status":"ok","timestamp":1728559928396,"user_tz":-60,"elapsed":23,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Calculate MSE and R-squared\n","mse_knn = mean_squared_error(y_test, y_pred_knn)\n","r2_knn = r2_score(y_test, y_pred_knn)\n","mae_knn = mean_absolute_error(y_test, y_pred_knn)\n","rmse_knn = np.sqrt(mse_knn)\n","mape_knn = np.mean(np.abs((y_test - y_pred_knn) / y_test)) * 100\n","\n","print(f'Mean Squared Error (KNN): {mse_knn}')\n","print(f'Root Mean Squared Error (KNN): {rmse_knn}')\n","print(f'Mean Absolute Error (KNN): {mae_knn}')\n","print(f'Mean Absolute Percentage Error (KNN): {mape_knn}')\n","print(f'R-squared (KNN): {r2_knn}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VwZbr-K_Lrbj","executionInfo":{"status":"ok","timestamp":1728559928397,"user_tz":-60,"elapsed":22,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"8b324d5b-b63d-4f58-8696-f3ce842b6d90"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (KNN): 2.2078490000000004\n","Root Mean Squared Error (KNN): 1.4858832390198096\n","Mean Absolute Error (KNN): 0.8918076923076925\n","Mean Absolute Percentage Error (KNN): 6.930573506510479\n","R-squared (KNN): 0.9310341276795984\n"]}]},{"cell_type":"code","source":["# Residual plot\n","residuals_knn = y_test - y_pred_knn\n","\n","plt.figure(figsize=(10,6))\n","plt.scatter(y_pred_knn, residuals_knn)\n","plt.axhline(0, color='red', linestyle='--')\n","plt.xlabel('Predicted Values (KNN)')\n","plt.ylabel('Residuals (KNN)')\n","plt.title('Residuals vs. Predicted Values (KNN)')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ujkMHUbbNGBj","executionInfo":{"status":"ok","timestamp":1728559928919,"user_tz":-60,"elapsed":541,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"f54454fd-3859-4035-8843-81a143bff3bb"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA0wAAAIjCAYAAAAwSJuMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABgnElEQVR4nO3deVTU9f7H8dcAsqgwiorgjmuSW2qaLWouiZVllplLuVS31K7m/WVqi4i3m7fttqfdulcr2zVzuUV53co0rcwMLVOitMRc0MENVObz+4PL6AhfGBCYhefjHM5xvvOZmfeszms+m80YYwQAAAAAKCDI2wUAAAAAgK8iMAEAAACABQITAAAAAFggMAEAAACABQITAAAAAFggMAEAAACABQITAAAAAFggMAEAAACABQITAAAAAFggMAHAOWbMmCGbzeZRW5vNphkzZpRrPT179lTPnj3L9TYCWWHPZ5MmTTRq1CjvFFSIkrzmytK8efNks9n0yy+/VPhte2r37t0KDw/XF1984e1SLF1yySW6//77vV0GgHJCYALgs/K/zOX/hYSEqH79+ho1apR+//13b5cHD539HAYFBalevXq66qqrtHr1am+XViJ79uzRjBkztHnz5gq/7VOnTql27dq6/PLLLdsYY9SwYUN17NixAisrfzNnzlTXrl112WWXuY6NGjVK1atXL9B2y5Ytql27tpo0aeIKgT179pTNZtOAAQMKtP/ll19ks9n05JNPuo6tXr3a9Xr95ptvClymsNueMmWKXnzxRe3du7e0dxOADyMwAfB5M2fO1BtvvKE5c+aof//+mj9/vnr06KHs7Oxyub2HHnpIJ06cKJfrrqz69u2rN954Q6+99pruvvtubdmyRb169dLHH3/slXq2b9+uV155pUSX2bNnj5KTk70SmKpUqaLBgwdr3bp1+vXXXwtt89lnn+m3337TiBEjKri68rN//37Xa6Y4qamp6t27t6pVq6ZVq1apSZMmbucvW7as0ABUFE97j6+//npFRUXppZdeKtH1A/APBCYAPq9///4aMWKE7rjjDr366qu67777lJaWpiVLlpTL7YWEhCg8PLxcrruyatmypUaMGKFbb71V06dP1/Lly2WM0TPPPGN5mezsbDmdznKpJywsTFWqVCmX6y4vw4cPlzFGb7/9dqHnv/XWWwoKCtItt9xSwZWVn/nz5yskJKTQ3qGzbd26Vb169VJERIRWrVql+Ph4t/MbNWqkmjVrKjk52ePb7tChg5YtW6ZNmzYV2zYoKEg33XSTXn/9dRljPL4NAP6BwATA71xxxRWSpLS0NLfjP/74o2666SZFR0crPDxcnTt3LhCqTp06peTkZLVo0ULh4eGqVauWLr/8ci1fvtzVprD5JDk5OZo0aZLq1KmjyMhIXXfddfrtt98K1DZq1KgCv2xbXefcuXPVq1cvxcTEKCwsTAkJCZo9e7ZHj8Hzzz+vCy+8UFWrVlXNmjXVuXNnvfXWW5bt//jjD4WEhBT6hXH79u2y2Wx64YUXJHn2GJ2vtm3bqnbt2kpPT5d0ZhjUO++8o4ceekj169dX1apVlZWVJUnasGGDEhMTZbfbVbVqVfXo0aPQOS1r167VxRdfrPDwcDVr1kwvv/xyobdf2Bymw4cPa9KkSWrSpInCwsLUoEED3XbbbTpw4IBWr16tiy++WJI0evRo15CtefPmuS5f1jWe67LLLlOTJk0KfZ5PnTqlBQsW6Morr1S9evW0ZcsWjRo1Sk2bNlV4eLhiY2M1ZswYHTx4sNjbsZqXZ/WY3XvvvWrYsKHCwsLUvHlzPfbYYwWC7jvvvKNOnTopMjJSUVFRatu2rZ599tlia/nwww/VtWvXQoff5fvhhx/Uu3dvhYWFadWqVWratGmBNpGRkZo0aZKWLl3qUQCSpD//+c+qWbOmx71Mffv21a+//uqVHkgA5SvE2wUAQEnlz02oWbOm69jWrVt12WWXqX79+po6daqqVaum9957TwMHDtTChQt1ww03SMoLLrNmzdIdd9yhLl26KCsrS19//bU2bdqkvn37Wt7mHXfcofnz52vYsGG69NJLtXLlSl1zzTXndT9mz56tCy+8UNddd51CQkK0dOlSjRs3Tk6nU+PHj7e83CuvvKIJEybopptu0sSJE5Wdna0tW7Zow4YNGjZsWKGXqVu3rnr06KH33ntPSUlJbue9++67Cg4O1uDBgyWV/jEqiUOHDunQoUNq3ry52/G//vWvCg0N1X333aecnByFhoZq5cqV6t+/vzp16qSkpCQFBQW5wubnn3+uLl26SJK+//57XXXVVapTp45mzJih06dPKykpSXXr1i22nqNHj+qKK67QDz/8oDFjxqhjx446cOCAlixZot9++02tW7fWzJkzNX36dP3pT39yhfZLL71UkiqkRpvNpmHDhunRRx/V1q1bdeGFF7rOS0lJUWZmpoYPHy5JWr58uX7++WeNHj1asbGx2rp1q/75z39q69at+vLLL8tkgYnjx4+rR48e+v3333XXXXepUaNGWrdunaZNm6aMjAxX7+Hy5cs1dOhQ9e7dW4899pikvJDzxRdfaOLEiZbXf+rUKX311VcaO3asZZvt27erV69eCgkJ0apVq9SsWTPLthMnTtTTTz+tGTNmeNQ7HRUVpUmTJmn69OnatGlTsXPDOnXqJEn64osvdNFFFxV7/QD8iAEAHzV37lwjyfz3v/81+/fvN7t37zYLFiwwderUMWFhYWb37t2utr179zZt27Y12dnZrmNOp9NceumlpkWLFq5j7du3N9dcc02Rt5uUlGTO/njcvHmzkWTGjRvn1m7YsGFGkklKSnIdGzlypGncuHGx12mMMcePHy/Qrl+/fqZp06Zux3r06GF69OjhOn399debCy+8sMj7UJiXX37ZSDLff/+92/GEhATTq1cv12lPHqOSkGRuv/12s3//frNv3z6zYcMG07t3byPJPPXUU8YYY1atWmUkmaZNm7o9Lk6n07Ro0cL069fPOJ1O1/Hjx4+b+Ph407dvX9exgQMHmvDwcPPrr7+6jm3bts0EBwcXeOwbN25sRo4c6To9ffp0I8l88MEHBerPv92vvvrKSDJz584tcH551FiYrVu3Gklm2rRpbsdvueUWEx4ebhwOh+u2z/X2228bSeazzz5zHct/j6Wnp7uOnfuaznfuY/bXv/7VVKtWzfz0009u7aZOnWqCg4PNrl27jDHGTJw40URFRZnTp08Xe//OtnPnTiPJPP/88wXOGzlypKlSpYqJi4sz9erVK1DD2Xr06OF6vyQnJxtJ5ptvvjHGGJOenm4kmSeeeMLVPv+1+P7775vDhw+bmjVrmuuuu87ttqtVq1bobYWGhpqxY8eW6H4C8H0MyQPg8/r06aM6deqoYcOGuummm1StWjUtWbJEDRo0kCRlZmZq5cqVuvnmm3XkyBEdOHBABw4c0MGDB9WvXz/t2LHDtapejRo1tHXrVu3YscPj2//oo48kSRMmTHA7fu+9957X/YqIiHD92+Fw6MCBA+rRo4d+/vlnORwOy8vVqFFDv/32m7766qsS3d6gQYMUEhKid99913UsNTVV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PFmDBw/WvHnzdPfdd+vFF1/U5ZdfrrZt2+rOO+9U06ZN9ccff2j9+vX67bff9N1330nKmzTfs2dPderUSdHR0fr666+1YMEC3XPPPZa31aFDBw0dOlQvvfSSHA6HLr30Uq1YsUI7d+4s0PaWW27RlClTdMMNN2jChAk6fvy4Zs+erZYtW7pNtr/qqqtcv7rfddddOnr0qF555RXFxMQUGvrOdtVVVyk2NlaXXXaZ6tatqx9++EEvvPCCrrnmGkVGRhb72A0ZMkQjRozQSy+9pH79+hX4xdyTx2jRokUaPXq05s6dW2BvnrIUFBSkV199Vf3799eFF16o0aNHq379+vr999+1atUqRUVFaenSpZKk5ORkpaSk6IorrtC4ceN0+vRp135Vxc3Bmjx5shYsWKDBgwdrzJgx6tSpkzIzM7VkyRLNmTNH7du3V7NmzVSjRg3NmTNHkZGRqlatmrp27ar4+PgKqfFsN954o8aNG6fFixerYcOG6t69u+u8qKgode/eXY8//rhOnTql+vXr69NPPy22pybfHXfcobvvvls33nij+vbtq++++06ffPJJgaFmkydPdi02MWrUKHXq1EnHjh3T999/rwULFuiXX35R7dq1dccddygzM1O9evVSgwYN9Ouvv+r5559Xhw4diu2Nuf766/Xggw8qKyvLtaCFlaeeekqHDh3Sq6++qujoaNcS5oWx2+2aOHFiiTayzR/K991337nC89mWL1+uRo0asaQ4EIi8uEIfABQpf8njr776qsB5ubm5plmzZqZZs2au5YrT0tLMbbfdZmJjY02VKlVM/fr1zbXXXmsWLFjgutwjjzxiunTpYmrUqGEiIiLMBRdcYP72t7+ZkydPutoUtgT4iRMnzIQJE0ytWrVMtWrVzIABA8zu3bsLXYL5008/NW3atDGhoaGmVatWZv78+YVe55IlS0y7du1MeHi4adKkiXnsscfMv//97wLLPJ+7rPjLL79sunfvbmrVqmXCwsJMs2bNzOTJk11LShcnKyvLREREGElm/vz5Bc735DHKf27OXWK7MJLM+PHji2xz9lLOhfn222/NoEGDXPe5cePG5uabbzYrVqxwa7dmzRrTqVMnExoaapo2bWrmzJlT6GN/7hLZxhhz8OBBc88995j69eub0NBQ06BBAzNy5Ehz4MABV5vFixebhIQEExISUuD+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PN+VD8955cLzXfnwnAcOY4yOHDmievXqKSjIeqZSpephCgoKUoMGDbxdRqGioqJ401UyPOeVC8935cNzXrnwfFc+POeBoaiepXws+gAAAAAAFghMAAAAAGCBwORlYWFhSkpKUlhYmLdLQQXhOa9ceL4rH57zyoXnu/LhOa98KtWiDwAAAABQEvQwAQAAAIAFAhMAAAAAWCAwAQAAAIAFAhMAAAAAWCAwecmMGTNks9nc/i644AJvl4Uy9Nlnn2nAgAGqV6+ebDabPvzwQ7fzjTGaPn264uLiFBERoT59+mjHjh3eKRbnrbjne9SoUQXe84mJid4pFudt1qxZuvjiixUZGamYmBgNHDhQ27dvd2uTnZ2t8ePHq1atWqpevbpuvPFG/fHHH16qGOfLk+e8Z8+eBd7nd999t5cqxvmYPXu22rVr59qctlu3bvr4449d5/P+rlwITF504YUXKiMjw/W3du1ab5eEMnTs2DG1b99eL774YqHnP/7443ruuec0Z84cbdiwQdWqVVO/fv2UnZ1dwZWiLBT3fEtSYmKi23v+7bffrsAKUZbWrFmj8ePH68svv9Ty5ct16tQpXXXVVTp27JirzaRJk7R06VK9//77WrNmjfbs2aNBgwZ5sWqcD0+ec0m688473d7njz/+uJcqxvlo0KCB/v73v+ubb77R119/rV69eun666/X1q1bJfH+rnQMvCIpKcm0b9/e22WggkgyixYtcp12Op0mNjbWPPHEE65jhw8fNmFhYebtt9/2QoUoS+c+38YYM3LkSHP99dd7pR6Uv3379hlJZs2aNcaYvPdzlSpVzPvvv+9q88MPPxhJZv369d4qE2Xo3OfcGGN69OhhJk6c6L2iUK5q1qxpXn31Vd7flRA9TF60Y8cO1atXT02bNtXw4cO1a9cub5eECpKenq69e/eqT58+rmN2u11du3bV+vXrvVgZytPq1asVExOjVq1aaezYsTp48KC3S0IZcTgckqTo6GhJ0jfffKNTp065vccvuOACNWrUiPd4gDj3Oc/35ptvqnbt2mrTpo2mTZum48ePe6M8lKHc3Fy98847OnbsmLp168b7uxIK8XYBlVXXrl01b948tWrVShkZGUpOTtYVV1yh1NRURUZGers8lLO9e/dKkurWret2vG7duq7zEFgSExM1aNAgxcfHKy0tTQ888ID69++v9evXKzg42Nvl4Tw4nU7de++9uuyyy9SmTRtJee/x0NBQ1ahRw60t7/HAUNhzLknDhg1T48aNVa9ePW3ZskVTpkzR9u3b9cEHH3ixWpTW999/r27duik7O1vVq1fXokWLlJCQoM2bN/P+rmQITF7Sv39/17/btWunrl27qnHjxnrvvfd0++23e7EyAOXhlltucf27bdu2ateunZo1a6bVq1erd+/eXqwM52v8+PFKTU1lHmolYvWc/+lPf3L9u23btoqLi1Pv3r2VlpamZs2aVXSZOE+tWrXS5s2b5XA4tGDBAo0cOVJr1qzxdlnwAobk+YgaNWqoZcuW2rlzp7dLQQWIjY2VpAIr6vzxxx+u8xDYmjZtqtq1a/Oe93P33HOPli1bplWrVqlBgwau47GxsTp58qQOHz7s1p73uP+zes4L07VrV0nife6nQkND1bx5c3Xq1EmzZs1S+/bt9eyzz/L+roQITD7i6NGjSktLU1xcnLdLQQWIj49XbGysVqxY4TqWlZWlDRs2qFu3bl6sDBXlt99+08GDB3nP+yljjO655x4tWrRIK1euVHx8vNv5nTp1UpUqVdze49u3b9euXbt4j/up4p7zwmzevFmSeJ8HCKfTqZycHN7flRBD8rzkvvvu04ABA9S4cWPt2bNHSUlJCg4O1tChQ71dGsrI0aNH3X5VTE9P1+bNmxUdHa1GjRrp3nvv1SOPPKIWLVooPj5eDz/8sOrVq6eBAwd6r2iUWlHPd3R0tJKTk3XjjTcqNjZWaWlpuv/++9W8eXP169fPi1WjtMaPH6+33npLixcvVmRkpGvegt1uV0REhOx2u26//Xb95S9/UXR0tKKiovTnP/9Z3bp10yWXXOLl6lEaxT3naWlpeuutt3T11VerVq1a2rJliyZNmqTu3burXbt2Xq4eJTVt2jT1799fjRo10pEjR/TWW29p9erV+uSTT3h/V0beXqavshoyZIiJi4szoaGhpn79+mbIkCFm586d3i4LZWjVqlVGUoG/kSNHGmPylhZ/+OGHTd26dU1YWJjp3bu32b59u3eLRqkV9XwfP37cXHXVVaZOnTqmSpUqpnHjxubOO+80e/fu9XbZKKXCnmtJZu7cua42J06cMOPGjTM1a9Y0VatWNTfccIPJyMjwXtE4L8U957t27TLdu3c30dHRJiwszDRv3txMnjzZOBwO7xaOUhkzZoxp3LixCQ0NNXXq1DG9e/c2n376qet83t+Vi80YYyoyoAEAAACAv2AOEwAAAABYIDABAAAAgAUCEwAAAABYIDABAAAAgAUCEwAAAABYIDABAAAAgAUCEwAAAABYIDABAAAAgAUCEwCgWKNGjdLAgQNdp3v27Kl77723wutYvXq1bDabDh8+XK63Y7PZ9OGHH5brbXji1ltv1aOPPurVGg4cOKCYmBj99ttvXq0DALyFwAQAfmrUqFGy2Wyy2WwKDQ1V8+bNNXPmTJ0+fbrcb/uDDz7QX//6V4/aVlTIOXnypGrXrq2///3vhZ7/17/+VXXr1tWpU6fKtY6y8t133+mjjz7ShAkTXMcKC6rPPvuswsLC9M4777ja2Gw21+l8zzzzjJo0aeI6PW/ePNlsNiUmJrq1O3z4sGw2m1avXi1Jql27tm677TYlJSWV3Z0DAD9CYAIAP5aYmKiMjAzt2LFD//d//6cZM2boiSeeKLTtyZMny+x2o6OjFRkZWWbXVxZCQ0M1YsQIzZ07t8B5xhjNmzdPt912m6pUqeKF6kru+eef1+DBg1W9enXLNklJSXrggQe0ePFi3XLLLa7j4eHheuihh4oNhyEhIfrvf/+rVatWFdlu9OjRevPNN5WZmVmyOwEAAYDABAB+LCwsTLGxsWrcuLHGjh2rPn36aMmSJZLODKP729/+pnr16qlVq1aSpN27d+vmm29WjRo1FB0dreuvv16//PKL6zpzc3P1l7/8RTVq1FCtWrV0//33yxjjdrvn9nTk5ORoypQpatiwocLCwtS8eXP961//0i+//KIrr7xSklSzZk3ZbDaNGjVKkuR0OjVr1izFx8crIiJC7du314IFC9xu56OPPlLLli0VERGhK6+80q3Owtx+++366aeftHbtWrfja9as0c8//6zbb79dX331lfr27avatWvLbrerR48e2rRpk+V1FtZDtnnzZtlsNrd61q5dqyuuuEIRERFq2LChJkyYoGPHjrnOf+mll9SiRQuFh4erbt26uummmyxvMzc3VwsWLNCAAQMKPd8Yoz//+c967rnntHz58gK9REOHDtXhw4f1yiuvWN6GJFWrVk1jxozR1KlTi2x34YUXql69elq0aFGR7QAgEBGYACCAREREuPUkrVixQtu3b9fy5cu1bNkynTp1Sv369VNkZKQ+//xzffHFF6pevboSExNdl3vqqac0b948/fvf/9batWuVmZlZ7Bfl2267TW+//baee+45/fDDD3r55ZdVvXp1NWzYUAsXLpQkbd++XRkZGXr22WclSbNmzdLrr7+uOXPmaOvWrZo0aZJGjBihNWvWSMoLdoMGDdKAAQO0efNm3XHHHcV+sW/btq0uvvhi/fvf/3Y7PnfuXF166aW64IILdOTIEY0cOVJr167Vl19+qRYtWujqq6/WkSNHSvZgnyUtLU2JiYm68cYbtWXLFr377rtau3at7rnnHknS119/rQkTJmjmzJnavn27UlJS1L17d8vr27JlixwOhzp37lzgvNOnT2vEiBFasGCB1qxZo0svvbRAm6ioKD344IOaOXOmW2grzIwZM/T9998XCKvn6tKliz7//PMi2wBAQDIAAL80cuRIc/311xtjjHE6nWb58uUmLCzM3Hfffa7z69ata3JyclyXeeONN0yrVq2M0+l0HcvJyTERERHmk08+McYYExcXZx5//HHX+adOnTINGjRw3ZYxxvTo0cNMnDjRGGPM9u3bjSSzfPnyQutctWqVkWQOHTrkOpadnW2qVq1q1q1b59b29ttvN0OHDjXGGDNt2jSTkJDgdv6UKVMKXNe55syZY6pXr26OHDlijDEmKyvLVK1a1bz66quFts/NzTWRkZFm6dKlrmOSzKJFiyzr//bbb40kk56e7qr7T3/6k9v1fv755yYoKMicOHHCLFy40ERFRZmsrCzLus+2aNEiExwc7PY8GZP3uIeGhprQ0FDzww8/FHrZ/OcmOzvbNG7c2MycOdMYY8zTTz9tGjdu7Go3d+5cY7fbjTHGTJ061bRs2dKcOnXKHDp0yEgyq1atcrveSZMmmZ49e3pUPwAEEnqYAMCPLVu2TNWrV1d4eLj69++vIUOGaMaMGa7z27Ztq9DQUNfp7777Tjt37lRkZKSqV6+u6tWrKzo6WtnZ2UpLS5PD4VBGRoa6du3qukxISEihPR35Nm/erODgYPXo0cPjunfu3Knjx4+rb9++rjqqV6+u119/XWlpaZKkH374wa0OSerWrVux1z106FDl5ubqvffekyS9++67CgoK0pAhQyRJf/zxh+688061aNFCdrtdUVFROnr0qHbt2uVx/ef67rvvNG/ePLf70q9fPzmdTqWnp6tv375q3LixmjZtqltvvVVvvvmmjh8/bnl9J06cUFhYmGw2W4HzLr/8clWvXl0PP/xwkQt8hIWFaebMmXryySd14MCBIuufMmWK9u/fX6Bn7mwRERFF1gwAgSrE2wUAAErvyiuv1OzZsxUaGqp69eopJMT9Y71atWpup48ePapOnTrpzTffLHBdderUKVUNERERJb7M0aNHJUn/+c9/VL9+fbfzwsLCSlVHvqioKN10002aO3euxowZo7lz5+rmm292LZ4wcuRIHTx4UM8++6waN26ssLAwdevWzXJRjKCgvN8WzVnzuM5dTOHo0aO666673Fa0y9eoUSOFhoZq06ZNWr16tT799FNNnz5dM2bM0FdffaUaNWoUuEzt2rV1/PhxnTx50i3wSnkh+KmnnlKfPn00ZMgQvfvuuwWe93wjRozQk08+qUceecRthbxz1ahRQ9OmTVNycrKuvfbaQttkZmaW+jUCAP6MHiYA8GPVqlVT8+bN1ahRI8svzWfr2LGjduzYoZiYGDVv3tztz263y263Ky4uThs2bHBd5vTp0/rmm28sr7Nt27ZyOp2uuUfnyv/Cn5ub6zqWkJCgsLAw7dq1q0AdDRs2lCS1bt1aGzdudLuuL7/8stj7KOUt/rB27VotW7ZM69at0+233+4674svvtCECRN09dVX68ILL1RYWFiRPTD5ISEjI8N1bPPmzW5tOnbsqG3bthW4L82bN3fd/5CQEPXp00ePP/64tmzZol9++UUrV64s9DY7dOggSdq2bZvl+StWrNBnn32mm2++2XI1vKCgIM2aNUuzZ88udsGMP//5zwoKCnLNMTtXamqqLrrooiKvAwACEYEJACqR4cOHq3bt2rr++uv1+eefKz09XatXr9aECRNcG5NOnDhRf//73/Xhhx/qxx9/1Lhx44rcQ6lJkyYaOXKkxowZow8//NB1nflD4ho3biybzaZly5Zp//79Onr0qCIjI3Xfffdp0qRJeu2115SWlqZNmzbp+eef12uvvSZJuvvuu7Vjxw5NnjxZ27dv11tvvaV58+Z5dD+7d++u5s2b67bbbtMFF1zgtjBCixYt9MYbb+iHH37Qhg0bNHz48CJ7yfJD3IwZM7Rjxw795z//0VNPPeXWZsqUKVq3bp3uuecebd68WTt27NDixYtdiz4sW7ZMzz33nDZv3qxff/1Vr7/+upxOp2vlwnPVqVNHHTt2LLDa39nat2+vlStXau3atUWGpmuuuUZdu3bVyy+/bHldUt5S5MnJyXruuecKnHf8+HF98803uuqqq4q8DgAIRAQmAKhEqlatqs8++0yNGjXSoEGD1Lp1a91+++3Kzs5WVFSUJOn//u//dOutt2rkyJHq1q2bIiMjdcMNNxR5vbNnz9ZNN92kcePG6YILLtCdd97pWp2tfv36Sk5O1tSpU1W3bl1XiPjrX/+qhx9+WLNmzVLr1q2VmJio//znP4qPj5eUN5Rt4cKF+vDDD9W+fXvNmTNHjz76qEf302azacyYMTp06JDGjBnjdt6//vUvHTp0SB07dtStt96qCRMmKCYmxvK6qlSporfffls//vij2rVrp8cee0yPPPKIW5t27dppzZo1+umnn3TFFVfooosu0vTp01WvXj1JeUPePvjgA/Xq1UutW7fWnDlz9Pbbb+vCCy+0vN077rij0KGTZ2vbtq1WrlypdevWafDgwZbDCh977DFlZ2cXeV1S3nDFpk2bFji+ePFiNWrUSFdccUWx1wEAgcZmzDmbawAAAK87ceKEWrVqpXfffdejxS7K0yWXXKIJEyZo2LBhXq0DALyBHiYAAHxQRESEXn/99WJXuCtvBw4c0KBBgzR06FCv1gEA3kIPEwAAAABYoIcJAAAAACwQmAAAAADAAoEJAAAAACwQmAAAAADAAoEJAAAAACwQmAAAAADAAoEJAAAAACwQmAAAAADAAoEJAAAAACz8P6ARSdG16cKnAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","\n","# Perform cross-validation\n","cv_scores_knn = cross_val_score(knn_model, X_train_scaled, y_train, cv=5, scoring='r2')\n","\n","# Print cross-validation results\n","print(f'Cross-Validation R² Scores (KNN): {cv_scores_knn}')\n","print(f'Average Cross-Validation R² Score (KNN): {cv_scores_knn.mean()}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P3Us1b-hNYJJ","executionInfo":{"status":"ok","timestamp":1728559928920,"user_tz":-60,"elapsed":26,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"e8f6f080-4eaa-4bbb-cf8c-72fa991961b9"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Cross-Validation R² Scores (KNN): [0.96977662 0.87804788 0.9457666  0.96261547 0.96217908]\n","Average Cross-Validation R² Score (KNN): 0.943677131950961\n"]}]},{"cell_type":"code","source":["for actual, predicted in zip(y_test, y_pred_knn):\n","    print(f\"Actual: {actual}, Predicted: {predicted}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"22N2JIcLNzYG","executionInfo":{"status":"ok","timestamp":1728559928920,"user_tz":-60,"elapsed":23,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"b8b2f397-e67c-4dd7-c1ea-a70311a5f447"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual: 14.0, Predicted: 10.479999999999999\n","Actual: 6.1, Predicted: 8.559999999999999\n","Actual: 23.6, Predicted: 22.38\n","Actual: 14.6, Predicted: 13.294\n","Actual: 8.2, Predicted: 9.0\n","Actual: 10.3, Predicted: 10.0\n","Actual: 12.26, Predicted: 12.282\n","Actual: 15.7, Predicted: 15.946000000000002\n","Actual: 8.4, Predicted: 8.6\n","Actual: 13.71, Predicted: 13.812000000000001\n","Actual: 14.4, Predicted: 14.229999999999999\n","Actual: 18.6, Predicted: 18.639999999999997\n","Actual: 28.2, Predicted: 27.734\n","Actual: 13.0, Predicted: 11.680000000000001\n","Actual: 7.8, Predicted: 9.620000000000001\n","Actual: 12.6, Predicted: 12.679999999999998\n","Actual: 12.9, Predicted: 18.2\n","Actual: 26.1, Predicted: 21.338\n","Actual: 10.2, Predicted: 10.48\n","Actual: 4.2, Predicted: 4.9\n","Actual: 9.8, Predicted: 9.34\n","Actual: 15.9, Predicted: 16.07\n","Actual: 12.2, Predicted: 11.982\n","Actual: 15.13, Predicted: 15.722\n","Actual: 18.72, Predicted: 17.862000000000002\n","Actual: 17.5, Predicted: 21.520000000000003\n","Actual: 8.0, Predicted: 8.0\n","Actual: 15.63, Predicted: 15.946000000000002\n","Actual: 21.09, Predicted: 20.747999999999998\n","Actual: 8.0, Predicted: 8.059999999999999\n","Actual: 13.0, Predicted: 12.03\n","Actual: 9.4, Predicted: 9.274000000000001\n","Actual: 12.4, Predicted: 10.479999999999999\n","Actual: 11.24, Predicted: 11.356\n","Actual: 21.3, Predicted: 22.38\n","Actual: 11.9, Predicted: 10.0\n","Actual: 8.6, Predicted: 8.06\n","Actual: 12.0, Predicted: 11.959999999999999\n","Actual: 13.6, Predicted: 13.36\n","Actual: 10.9, Predicted: 10.700000000000001\n","Actual: 13.3, Predicted: 13.366000000000003\n","Actual: 10.7, Predicted: 12.03\n","Actual: 9.0, Predicted: 8.879999999999999\n","Actual: 21.91, Predicted: 21.778\n","Actual: 11.28, Predicted: 11.332\n","Actual: 15.98, Predicted: 15.888\n","Actual: 34.19, Predicted: 33.188\n","Actual: 11.23, Predicted: 11.786000000000001\n","Actual: 11.61, Predicted: 11.894\n","Actual: 13.0, Predicted: 11.668000000000001\n","Actual: 18.33, Predicted: 17.924\n","Actual: 19.8, Predicted: 21.520000000000003\n"]}]},{"cell_type":"code","source":["# Q-Q plot\n","plt.figure(figsize=(8,6))\n","stats.probplot(residuals_knn, dist=\"norm\", plot=plt)\n","plt.title('Q-Q Plot')\n","plt.show()"],"metadata":{"id":"avf_zZBaOcpi","colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1728559929383,"user_tz":-60,"elapsed":480,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"1ffde9cd-50e8-4c5c-eab8-d20ef09aee9a"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate VIF for each variable\n","vif_data = pd.DataFrame()\n","vif_data[\"feature\"] = X.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\n","\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6eJKhetqmXr8","executionInfo":{"status":"ok","timestamp":1728559929383,"user_tz":-60,"elapsed":12,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}},"outputId":"95f80725-724c-4a19-aec4-8343d1e29d77"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["                                             feature          VIF\n","0                  All Items (12 Months Avg. Change)  1763.096852\n","1                            Food (Year on Change)/1    21.061671\n","2                     Food (12 Months Avg. Change)/1   868.356867\n","3     All Items Less Farm Produce (Year on Change)/2    31.578633\n","4  All Items Less Farm Produce (12 Months Avg. Ch...   415.906130\n","5  All Items Less Farm Produce and Energy (Year o...    43.266383\n","6  All Items Less Farm Produce and Energy (12 Mon...   123.857932\n"]}]},{"cell_type":"code","source":["df_knn = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_knn})"],"metadata":{"id":"2sDTpXVWKnY4","executionInfo":{"status":"ok","timestamp":1728559929383,"user_tz":-60,"elapsed":10,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Save to Excel\n","df_knn.to_excel('knn_results.xlsx', index=False)"],"metadata":{"id":"cxgip8CPKnxP","executionInfo":{"status":"ok","timestamp":1728559929383,"user_tz":-60,"elapsed":10,"user":{"displayName":"AYODELE AYOMIDE","userId":"10824171944411540008"}}},"execution_count":14,"outputs":[]}]}